<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./DEdit_Files/filelist.xml">
<link rel=Edit-Time-Data href="./DEdit_Files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>Using DEdit to Create Worlds in Aliens versus Predator 2</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Maxwell Bliss</o:Author>
  <o:LastAuthor>Nathan Hendrickson</o:LastAuthor>
  <o:Revision>25</o:Revision>
  <o:TotalTime>300</o:TotalTime>
  <o:Created>2001-11-19T19:17:00Z</o:Created>
  <o:LastSaved>2001-11-30T22:08:00Z</o:LastSaved>
  <o:Pages>44</o:Pages>
  <o:Words>21837</o:Words>
  <o:Characters>124474</o:Characters>
  <o:Company>MONOLITH</o:Company>
  <o:Lines>1037</o:Lines>
  <o:Paragraphs>248</o:Paragraphs>
  <o:CharactersWithSpaces>152862</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:"Formata Light";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:"Times New Roman";
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:auto;
	mso-font-signature:0 0 0 0 0 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{margin-right:0in;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:24.0pt;
	font-family:"Times New Roman";
	mso-font-kerning:18.0pt;
	font-weight:bold;}
h2
	{margin-right:0in;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:2;
	font-size:18.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
h3
	{margin-right:0in;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:3;
	font-size:13.5pt;
	font-family:"Times New Roman";
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
p
	{margin-right:0in;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:420638298;
	mso-list-type:hybrid;
	mso-list-template-ids:1871353636 -609042612 1116738104 1883672870 -411769210 967485138 1948912680 -978969522 1279690904 -1422916884;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1037"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body bgcolor="#ccffff" lang=EN-US link=blue vlink=purple style='tab-interval:
.5in'>

<div class=Section1>

<p align=center style='text-align:center'><b><span style='font-size:24.0pt;
font-family:Arial'>Using DEdit to Create Worlds for </span></b></p>

<p align=center style='text-align:center'><b><span style='font-size:24.0pt;
font-family:Arial'><img width=480 height=335 id="_x0000_i1025"
src="DEdit_Files/image002.jpg"></span></b></p>

<p align=center style='text-align:center'><a name="_Toc482706183"><span
style='font-size:7.5pt;font-family:Arial'>The LithTech™ Development System is
copyright 1998-2000 by LithTech, Inc., Kirkland, Washington, U.S.A. All rights
reserved.<br>
Alien vs Predator 2 is copyright ©2001 by Twentieth Century Fox Film
Corporation. All rights reserved. </span></a></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Welcome to the DEdit
overview and tutorial. DEdit is the tool created by the LithTech team that
enabled the AVP2 Level Designers and Artists to create the geometry and
gameplay you experienced in Alien vs Predator 2 (AVP2). DEdit allows you to
build the ground, sky, walls, ceilings and shapes for your levels. You will
then apply textures, props, prefabs, lights and sounds to give them a realistic
appearance. Alien vs Predator 2 was created using literally thousands of these
assets which you may appropriate to create the base for your own level. You may
also add your own assets where applicable. Finally, you’ll add the game objects
that allow other players to interact with your world.</span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Creating levels is an
extremely complex and time consuming process, and the following is merely the
starting point for those who want to learn the basics of building worlds for
the LithTech engine. If you’ve done game design before on a 3D or near-3D game,
you’ve probably worked with tools like DEdit. A separate document will cover
ModelEdit, the companion to Dedit, that allows you to create characters and
models for your world.</span></p>

<h1><a name="_Toc502717194"></a><a name="_Toc482706184"></a><a
name="_Toc500144892"></a><span style='mso-bookmark:_Toc502717194'><span
style='font-family:Arial'>Basic Terms </span></span></h1>

<p><span style='font-size:10.0pt;font-family:Arial'>These terms are relevant to
a discussion of DEdit. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Project </span></b><span
style='font-size:10.0pt;font-family:Arial'>— A <b>project </b>in DEdit
represents the sum of all the resources in the game:&nbsp; all the code, all the
textures, all the sounds, all the worlds, and so on. Unlike other world
geometry editors, DEdit first opens the project, rather than a world file. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>World </span></b><span
style='font-size:10.0pt;font-family:Arial'>— When your players walk around in
your game, it is a <b>world </b>that they’re standing in. Worlds divide your
game up into sections where different parts of the game take place. In other
games, these are sometimes referred to as maps, levels, scenes, or episodes.
World-editing is the primary focus of DEdit and each world is stored in a
separate file on the hard drive. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Objects </span></b><span
style='font-size:10.0pt;font-family:Arial'>— Simply put, anything a player
interacts with that moves, lights up, shoots, growls, or goes into the player’s
inventory is an <b>object </b>. DEdit allows you to place any kind of object
that your game’s code or the engine’s code can create. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>World Geometry </span></b><span
style='font-size:10.0pt;font-family:Arial'>— Parts of the world that act as
walls, floors and sky are generally made of <b>world geometry </b>. Such
geometry is solid, immovable, and generally never changes. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Brush </span></b><span
style='font-size:10.0pt;font-family:Arial'>— The basic unit of world geometry.
A brush is made up of planes that define its faces, lines that define its
edges, and vertices that define its corners. All brushes must be convex for
reasons that will be discussed later. You can manipulate either an entire brush
at once or any of the vertices, lines, or planes in the brush. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Primitive </span></b><span
style='font-size:10.0pt;font-family:Arial'>— A simple shape that you can add to
the world as the foundation of a more complex shape. Typical primitives are
things such as cubes, pyramids, and cylinders. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Prefab </span></b><span
style='font-size:10.0pt;font-family:Arial'>— A prefab is like a primitive, but
more complex. If you build a street lamp complete with textures and a light
source that gives off just the right shade of light, you can select the lamp
and its associated source (or any group of objects and brushes inside DEdit)
and save it as a <b>prefab </b>. Thereafter, you can copy and paste that streetlamp
into your world without having to rebuild the whole object. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Unit </span></b><span
style='font-size:10.0pt;font-family:Arial'>— The basis of measurement in DEdit
and the LithTech engine. Units don’t equate directly to real-world values.
Instead, the game designers can select a scale of game units to real-world
measurements. As an example, in Alien vs Predator 2 the following values are
used:&nbsp; railings are 48 units tall, a chest-high box would be 64 units, and
a typical doorway would be 128 units high. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Mode </span></b><span
style='font-size:10.0pt;font-family:Arial'>— DEdit has several different modes
that allow you to change certain elements of your world (i.e. just brushes or
just objects) without accidentally affecting others. They’re designed to
simplify interacting with your world while editing, so it’s important to choose
the right mode for your task. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Processing </span></b><span
style='font-size:10.0pt;font-family:Arial'>— When you <b>process </b>your
world, DEdit creates a second version of the world with some information
removed (parts only you need to know about), and other information added (parts
only the game engine needs). <b>Processing </b>is a necessary step you’ll take
in getting your world up and running in the game, and is often the first place
where you will discover problems with your level. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Texture </span></b><span
style='font-size:10.0pt;font-family:Arial'>— In DEdit, textures are used like
wallpaper, paint, or plaster to cover the raw plywood of your walls, floors,
ceilings, doors and so forth. Without a texture, your brush will appear
flat-shaded in the game, almost always with unpleasant results. Just as you
wouldn’t want a house with raw plywood walls, you always want to apply textures
to the brushes in your level. </span></p>

<h2><a name="_Toc502717195"></a><a name="_Toc482706185"></a><a
name="_Toc500144893"></a><span style='mso-bookmark:_Toc502717195'><span
style='font-family:Arial'>Building Your First World </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>The first step we’ll want
to follow in building our new world is to pick a project. As mentioned above, a
project specifies all the resources you’ll have access to in your world, from
the game code on up. Generally, you’ll only create or use one project per game.
Projects can be modified over time very easily, since they simply consist of a
collection of files laid out on disk in a structure that DEdit can recognize. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>In the <b>File </b>menu
select the <b>Open Project </b>command or press <b>CTRL+O </b>. Navigate to the
directory in which you have installed AVP2, you’ll notice that DEdit lists a
.dep file. This is the project’s root file, and it stores various tidbits about
the project. This is the only type of file you will directly open with DEdit. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Now that you have your
project open, you’ll want to create a world to work in. This is also easy to
do. Go to the <b>File </b>menu and select <b>New World </b>. When DEdit asks
you what to name the world, type “Simple1”. This is the name your world will
have when you go to open it in DEdit. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Tip:&nbsp; </span></b><span
style='font-size:10.0pt;font-family:Arial'>The name you provide is also the
name of the world’s file on your hard drive (</span><span style='font-size:
10.0pt;font-family:"Courier New"'>Simple1.ed </span><span style='font-size:
10.0pt;font-family:Arial'>). Later we will cover how the project is written to
your hard drive. </span></p>

<h2><a name="_Toc502717196"></a><a name="_Toc482706186"></a><a
name="_Toc500144894"></a><span style='mso-bookmark:_Toc502717196'><span
style='font-family:Arial'>The DEdit User Interface </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>What you see in front of
you will look similar to this: </span></p>

<p><span style='font-size:10.0pt;font-family:"Formata Light"'><img width=498
height=373 id="_x0000_i1026" src="DEdit_Files/image004.jpg"></span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The callouts in this
screenshot illustrate the various sections of DEdit’s UI. Use the buttons in
the <b>Toolbars </b>to make new worlds, switch modes, and run your world. You
can learn an individual button’s function by hovering your mouse over it to get
a Tool Tip. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>In the <b>Project Window </b>,
DEdit gives you access to all of the resources in the game. Most tabs represent
a resource you can add to the game. There are two special ones ( <b>Properties </b>and
<b>Nodes </b>) that relate to objects inside your maps. We’ll discuss all of
these in a later section and they’re documented in the <i>DEdit Toolbars </i>chapter
as well. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>There are four <b>viewports
</b>that provide windows onto the world you’re building. Each one presents a
different view of the world. The upper left window shows you a Perspective view
shot from a movable camera point in the level. The other three views have a
fixed-view camera that displays either Top, Front or Left view (going in
clockwise order). You’ll spend a lot of time working with these views. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>In the <b>Status Bar </b>,
DEdit provides information about the level or about the view you’re currently
in. We’ll get into the depths of the user interface in later chapters, although
you’re welcome to stop and explore if you’d like. Use the Tool Tips and the
Status Bar to learn more about what the controls do. </span></p>

<h2><a name="_Toc502717197"></a><a name="_Toc482706187"></a><a
name="_Toc500144895"></a><span style='mso-bookmark:_Toc502717197'><span
style='font-family:Arial'>Making a Simple Room </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>Our first world is going to
be very, very simple. We’re going to make a box with a light. If you’re a
programmer, this may be as complex of a level as you need to create, since
you’ll mainly be making levels only to test your code and not for inclusion in
the game itself. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Even though this level is
extremely simple, we’ll still want to texture it. Use your mouse to select the <b>Textures
</b>tab in the <b>Project Window </b>. This tab is where you select textures to
apply to your brushes. In the top section of the <b>Textures </b>tab, there’s a
box with folders listed in it. Click on the folder that is called WorldTextures.
</span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>When you do so, the list
box in the middle of the tab should fill up with subfolders that break the
textures up into categories. Within these subfolders there is a folder called Floor_Ceiling.
Within these folders are listed the individual texture names. Click on the
folder called <i>Floor_Ceiling. </i><span style="mso-spacerun: yes"> </span>In
the list of textures choose a texture named <i>asphalt. </i>Notice that there’s
a preview of <i>Asphalt </i>in the bottom window of the tab. From now on (until
you select a different texture) this texture will be applied to every brush you
create. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>To actually start putting
brushes into your world, first move your mouse pointer over the
upper-right-hand viewport (top view). The green crosshairs (also called the <b>marker
</b>or the <b>insertion point </b>) is like the cursor in a word
processor:&nbsp; it’s where the objects you add to your map (brushes, objects,
and things you paste in) will appear. If the viewports are your eyes, then the
marker is your hand. We can leave the marker where it is for now, but you’ll
learn how to move it around shortly. </span></p>

<p><span style='font-size:10.0pt;font-family:"Formata Light"'><img width=226
height=232 id="_x0000_i1027" src="DEdit_Files/image006.jpg">&nbsp;<img
width=241 height=236 id="_x0000_i1028" src="DEdit_Files/image008.jpg"></span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The first step, since we’re
zoomed in fairly close to the grid, will be to zoom the camera out a little in
the viewport so that we can see more of the grid at once. Camera control is
done in DEdit using the <b>I, O </b>and <b>C </b>keys with the mouse. </span></p>

<table border=1 cellspacing=0 cellpadding=0 style='mso-cellspacing:0in;
 mso-padding-alt:0in 0in 0in 0in'>
 <tr>
  <td width=55 valign=top style='width:41.25pt;padding:0in 0in 0in 0in'>
  <p><b><span style='font-size:10.0pt;font-family:Arial'>Press </span></b></p>
  </td>
  <td width=463 valign=top style='width:347.25pt;padding:0in 0in 0in 0in'>
  <p><b><span style='font-size:10.0pt;font-family:Arial'>Result </span></b></p>
  </td>
 </tr>
 <tr>
  <td width=55 valign=top style='width:41.25pt;padding:0in 0in 0in 0in'>
  <p><b><span style='font-size:10.0pt;font-family:Arial'>I </span></b></p>
  </td>
  <td width=463 valign=top style='width:347.25pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:Arial'>In the Perspective View,
  press <b>I </b>and move the mouse pointer to scroll in the X and Y plane. In all
  other views, this combination scrolls in all available directions. </span></p>
  </td>
 </tr>
 <tr>
  <td width=55 valign=top style='width:41.25pt;padding:0in 0in 0in 0in'>
  <p><b><span style='font-size:10.0pt;font-family:Arial'>I+Left Mouse </span></b></p>
  </td>
  <td width=463 valign=top style='width:347.25pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:Arial'>Same as above, but
  faster. </span></p>
  </td>
 </tr>
 <tr>
  <td width=55 valign=top style='width:41.25pt;padding:0in 0in 0in 0in'>
  <p><b><span style='font-size:10.0pt;font-family:Arial'>I+Right Mouse </span></b></p>
  </td>
  <td width=463 valign=top style='width:347.25pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:Arial'>Scroll along the Y-axis
  in the Perspective View. </span></p>
  </td>
 </tr>
 <tr>
  <td width=55 valign=top style='width:41.25pt;padding:0in 0in 0in 0in'>
  <p><b><span style='font-size:10.0pt;font-family:Arial'>O </span></b></p>
  </td>
  <td width=463 valign=top style='width:347.25pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:Arial'>In the Perspective View,
  press <b>O </b>and hold the left mouse button to pan the camera in all
  directions. In all other views, this combination zooms in and out of the
  displayed geometry. </span></p>
  </td>
 </tr>
 <tr>
  <td width=55 valign=top style='width:41.25pt;padding:0in 0in 0in 0in'>
  <p><b><span style='font-size:10.0pt;font-family:Arial'>O+Left Mouse </span></b></p>
  </td>
  <td width=463 valign=top style='width:347.25pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:Arial'>In the Perspective View,
  press <b>O </b>and hold the left mouse button to move or “fly” forward
  through the level. </span></p>
  </td>
 </tr>
 <tr>
  <td width=55 valign=top style='width:41.25pt;padding:0in 0in 0in 0in'>
  <p><b><span style='font-size:10.0pt;font-family:Arial'>O+Right Mouse </span></b></p>
  </td>
  <td width=463 valign=top style='width:347.25pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:Arial'>In the Perspective View,
  press <b>O </b>and hold the right mouse button to move or “fly” backward
  through the level. </span></p>
  </td>
 </tr>
 <tr>
  <td width=55 valign=top style='width:41.25pt;padding:0in 0in 0in 0in'>
  <p><b><span style='font-size:10.0pt;font-family:Arial'>C </span></b></p>
  </td>
  <td width=463 valign=top style='width:347.25pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:Arial'>In the Perspective View,
  press <b>C </b>and move the mouse pointer to adjust the draw distance. </span></p>
  </td>
 </tr>
 <tr>
  <td width=55 valign=top style='width:41.25pt;padding:0in 0in 0in 0in'>
  <p><b><span style='font-size:10.0pt;font-family:Arial'>C+Left Mouse </span></b></p>
  </td>
  <td width=463 valign=top style='width:347.25pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:Arial'>Same as above, but
  faster. </span></p>
  </td>
 </tr>
</table>

<p><span style='font-size:10.0pt;font-family:Arial'>Press the <b>O </b>key and
move your mouse pointer slowly up. You should see the grid in the upper right
viewport getting smaller. We’re actually zooming out to see more of our map,
not changing the scale of the grid. Don’t zoom out farther than you need to in
order to see a few more grid squares on the screen (perhaps four or six squares
across the screen). Your screen may be at a high enough resolution that you can
already see six or so grid squares. If that’s the case, play with the camera a
little but make sure you come back to a scale of about 4-6 squares across. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Now press <b>CTRL+B </b>to
switch into Brush mode. This is the mode reserved for moving brushes, as well
as adding them to the world. From the center of the marker, count up two
gridlines and then over to the right by two gridlines. Move your mouse pointer
to that intersection in the gridlines. Once you have the mouse over the
intersection, press the <b>SPACE </b>key once and move the mouse away. You
should now have a line following your mouse pointer. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The line you see is the
first side of the brush you’re about to create. To continue the brush, move
your pointer until it’s over the grid two gridlines <i>below </i>and to the
right of the <b>marker </b>and press <b>SPACE </b>again. DEdit drops the vertex
on that point and adds a new vertex and side to the brush. Now move the mouse
and place another new vertex four grid units to the left of the current vertex.
Add your next vertex four units straight up (two units above the green marker).
Last, move the mouse pointer back to the vertex you started at. When you press <b>SPACE
</b>over the original vertex, DEdit displays a dialog box that asks you to
enter the thickness of your brush. Enter a value of 64 and click <b>OK </b>.
This completes the creation of the brush. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>What you see should look
like this: </span></p>

<p><span style='font-size:10.0pt;font-family:"Formata Light"'><img width=372
height=194 id="_x0000_i1029" src="DEdit_Files/image010.jpg"></span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>In the 3D Perspective
viewport, you can see that your square has been created and given a height of
64 units. This square will form the floor of our simple room. Each time you
create a brush in the editor you will be prompted to give it a thickness. The
64-unit thickness was chosen to make the floor brush easy to find in the editor
by eye. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Using relatively large
units where possible also helps in other ways:&nbsp; You can more often let the
editor align your textures for you if you build to the grid, since typical
texture sizes fall along the grid as well. If your textures are mostly 32x32,
16x16, 32x64 and so on, laying textures out becomes a very simple task when you
build to the grid. You’ll need to scale things to fit much less often, you can
more easily make use of textures that tile together and you can realign a
texture much more simply. We’ll talk about that in a later chapter as well. For
now, assume that building to a large grid where possible is a good rule of
level design practice. </span></p>

<h3><a name="_Toc502717198"><span style='font-family:Arial'>Creating a Ceiling </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>Next, we’re going to use
the Copy and Paste feature to create a ceiling for our room. In the <b>Edit </b>menu
select the <b>Copy </b>( <b>CTRL+C </b>) command. Now there is a copy of the
floor brush on the clipboard. Now in the <b>Edit </b>menu select <b>Paste </b>(
<b>CTRL+V </b>) to paste. If you look in the perspective viewport (the one in
the upper left), you should now see the new brush near your original brush. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Since the brush isn’t lined
up quite as you’d want it for a ceiling, you’ll want to move it around a
little. In the <b>Top </b>viewport (upper right), press the <b>O </b>key and
click the mouse to zoom out until you can see both brushes. Move the mouse to
the black <b>drag handle </b>in the center of the brush. Drag handles can be
used to move or to resize the objects they’re attached to. In this case, click
the left mouse button and drag the center handle towards the center of our
original brush (which should still be the center of the marker as well). </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>When you have the center
handle over the marker, your selected brush should be lined up exactly on top
of your first brush. Drop the brush there and move your mouse to the bottom
right viewport (Front). Use the <b>O </b>key again to zoom the viewport out
until you have a good view of the selected brush. Next, click and drag the
center handle of the brush until you’ve moved the brush straight up 4 grid
units. Don’t worry if that means dragging the brush out of the visible area. The
viewport will scroll up for you when you reach its edge. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Your ceiling is now a good
height above your floor, at 192 units. That’s about the height of a tall
conference room ceiling in most games. </span></p>

<h3><a name="_Toc502717199"><span style='font-family:Arial'>Creating Walls </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>Now we need to create four
walls. In the Front viewport, hold down the <b>X </b>key and move the mouse
upwards a few grid lines. What you should see is that the green <b>marker </b>moves
wherever you move your mouse. Since the <b>marker </b>represents the insertion
location where new brushes will appear, we’ll need to move it upwards until it
reaches our ceiling in order to add our walls. Move the marker until it’s at
the same grid line as the top edge of the ceiling brush. </span></p>

<p><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600"
 o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f"
 stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_s1026" type="#_x0000_t75" alt="" style='position:absolute;
 margin-left:0;margin-top:0;width:219.75pt;height:186.75pt;z-index:1;
 mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
 mso-wrap-distance-bottom:0;mso-position-horizontal:left;
 mso-position-horizontal-relative:text;mso-position-vertical-relative:line'
 o:allowoverlap="f">
 <v:imagedata src="DEdit_Files/image012.gif"/>
 <w:wrap type="square"/>
</v:shape><![endif]--><![if !vml]><img width=293 height=249
src="DEdit_Files/image012.gif" align=left hspace=12 v:shapes="_x0000_s1026"><![endif]><span
style='font-size:10.0pt;font-family:Arial'>Now you’ll want to switch back to
the Top viewport. Use the <b>O </b>key to zoom out a little further until you
can see a few rows of grid around the selected brush. Now use the <b>SPACE </b>bar
to draw a rectangular brush that’s 1x4 grid squares and runs along the whole
right edge ofyour ceiling brush. When you’re prompted for a thickness, give it
a value of 320. That’s a lot thicker than you used for the floor, but there’s a
reason. We want this wall to reach all the way from the ceiling to the floor.
If you’ll look in the Front view, you’ll see that our new brush does just that,
neatly sealing off one side of our room. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>To make the next wall, copy
and paste your new brush. Then use the center drag handle on the pasted brush
to move it until it seals the <i>west </i>side of the ceiling brush the same
way that your first brush seals the <i>east </i>side. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Now we have to make two
more walls. Using the <b>SPACE </b>bar to draw a 6x1 rectangle on the north
edge of the ceiling brush. By making it 6 grid squares wide, you’ll make a good
seal against both the floor/ceiling brushes and also against the two existing
wall brushes. Make this new 6x1 brush 320 units tall as well. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Note:&nbsp; </span></b><span
style='font-size:10.0pt;font-family:Arial'>Sealing a level is another topic
that we’ll cover later. For now, accept that it is important. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The last step you’ll need
to take making brushes for your level will be to copy your latest brush, paste
it and move it to cover the <i>south </i>edge (in the top viewport) of the
ceiling brush. Your room now has solid walls, a floor and a ceiling. You’ve
created 75 percent of your level. </span></p>

<h2><a name="_Toc502717200"></a><a name="_Toc482706188"></a><a
name="_Toc500144896"></a><span style='mso-bookmark:_Toc502717200'><span
style='font-family:Arial'>Adding Objects </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>There are only three
objects left that you need to add in order to see your level:&nbsp; a <b>GameStartPoint
</b>(which specifies the location where your player will first spawn into the
world), a light (without which you won’t be able to see your level), and a <b>WorldProperties
</b>object (which specifies some of the rudimentary information necessary to
create your level). </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>To place your start point,
switch to the Front viewport so that you can move the marker vertically. Use
the <b>X </b>key to move the marker down until it is one grid square above the
floor. You should also check the Top viewport and make sure that the marker (if
it isn’t still at the very center of the level) is at least 1 grid square from
any of the walls. Since 1 grid square is 64 game units, this ensures that your
player won’t accidentally appear halfway into the floor. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Press <b>CTRL+H </b>to
enter Object mode. Object mode is the main mode you use for creating, moving,
and setting the properties of objects. Once you’re in Object mode, select <b>Add
Object </b>from the <b>World </b>menu. In the Objects dialog, the left pane of
the dialog lists all the objects that your game code supports. Scroll down the
list until you see a “ <b>GameStartPoint </b>” object. Select it and click <b>OK
</b>. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Once you’ve done that, look
at the center of the marker. The small white square is the newly created start
point. Your player can now actually enter the world. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Now move the marker
vertically upward one grid square, using the <b>X </b>key in the Front
viewport. Although you <i>could </i>add your light right at the location of the
<b>GameStartPoint </b>object, it will be easier to select later if you add it
at a different location. In the <b>World </b>menu select <b>Add Object </b>again.
This time, go through the list of objects until you find one called Light.
Select it and click <b>OK </b>. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Your start point will
become unselected, and a small new cube will appear at the center of the
marker. You should also notice a bluish circle that surrounds your whole level.
That circle represents the radius of the light in the level. The light fades
out as it gets further from its center point, and it ends completely at the
edge of the blue line. Since you have a small level, one light will illuminate
it all without trouble. Lastly, you will need to add a <b>WorldProperties </b>object.
Use the <b>X </b>key to move your marker forward one grid square in the Top
viewport. As before, select <b>Add Object </b>from the <b>World </b>menu,
scroll down, select <b>WorldProperties </b>, and select <b>OK </b>. </span></p>

<h3><a name="_Toc502717201"><span style='font-family:Arial'>Processing the
World </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>The last step you’ll need
to take in preparing your level is to <b>process </b>it. In the <b>World </b>menu,
select <b>Process </b>and you’ll see a large dialog box appear. The only two
checkboxes on the dialog that you need to worry about are <b>Import Geometry </b>and
<b>Apply Lighting </b>. The Processor’s options are all documented in the <i>Processor
Controls, Options and Parameters </i>chapter, which you can feel free to read
now if you want. However, for now only those two boxes must be checked. Don’t
worry if the <b>Import Geometry </b>box is grayed out. DEdit is just assuring
that the option’s turned on, since the level has never been processed before.
You can leave the rest of the checkboxes as they are by default. Once you’ve
checked both boxes, click <b>OK </b>to process the level. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The dialog box will change
into a progress monitor and a log of what the Processor’s doing. Once an <b>OK </b>button
appears in the dialog, your level has been processed. Your world’s now ready
for you to explore. </span></p>

<h3><a name="_Toc502717202"><span style='font-family:Arial'>Testing the World </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>To actually load your level
in the game, click on edit, and the options, to bring up the Dedit properties
menu. Click on the Run tab. In the Executable field browse to LithTech.exe. In
the Working directory enter the location of the root AVP2 directory i.e.
C:\AVP2\. In the Program arguments field enter the command string </span><span
style='font-size:10.0pt;font-family:"Courier New"'>–rez AVP2 +runworld
%WorldName% </span><span style='font-size:10.0pt;font-family:Arial'> -- <b>please
note that this command is case-sensitive, the level will not load correctly
in the game unless you match this syntax and character case exactly</b>. After
entering all of this you should be able to launch your level by clicking world
and the run, by pressing <b>CTRL+ALT+R </b>, or by clicking the <b>Run World </b>button
on the tool bar. </span></p>

<h2><a name="_Toc502717203"></a><a name="_Toc482706190"></a><a
name="_Toc500144898"></a><span style='mso-bookmark:_Toc502717203'><span
style='font-family:Arial'>LithTech Resource Types </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>Before starting, you should
learn a little more about the structure of the resources that DEdit and
LithTech can use in a game. The LithTech engine can access and use a wide
variety of file types and other resources. The list below is arranged by
resource type, and each resource type includes a list of the sorts of files
LithTech can use in that type, as well as a description of those files. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Project </span></b><span
style='font-size:10.0pt;font-family:Arial'>— As mentioned before, the project
is the total of your whole game and all its resources. A .DEP (DEdit Project)
file at the top of your tree of game resource directories serves as a guide to
DEdit. The .DEP file is a pointer to the rest of the resources for DEdit and
includes some of the information about your game resources. The rest of your
game’s files exist in subdirectories of the directory where your .DEP file
resides. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Directories </span></b><span
style='font-size:10.0pt;font-family:Arial'>— The subdirectories that contain
your other game resources are a type of resource in themselves. The structure
of these directories defines the tree views you see in many of the tabs in
DEdit’s Project window. If you find a game’s .DEP file and look at the
subdirectories in the same folder with it, you’ll see names such as TEXTURES,
WORLDS, SOUNDS, and MODELS. These folders contain whatever resource they’re
named for, so if you want to add new textures to a game or copy a world from
one game to another, you should look in the directories named <b>Textures </b>and
<b>Worlds </b>, respectively. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Note:&nbsp; </span></b><span
style='font-size:10.0pt;font-family:Arial'>Inside each of these directories is
a tag file with a name that tells DEdit what resource it contains. A file
called DIRTYPETEXTUREStells DEdit that the directory contains textures;
DIRTYPEWORLDS says the directory contains worlds, and so on. If you want to add
new subdirectories or reorganize your resources, just copy the proper tag file
into any new directories that don’t have one, and they will appear on the
proper tabs in DEdit. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Worlds </span></b><span
style='font-size:10.0pt;font-family:Arial'>— Worlds come in two forms:&nbsp;
.ED files and .DAT files. If you think of worlds as programs, the .ed file is
the source code:&nbsp; Editable and understandable by the user and DEdit, but
not executable. The .DAT file is like an actual program:&nbsp; it can be run in
the game, but since it’s been “compiled” ( <b>processed </b>, in this case),
the user can no longer modify it. The .ed files are what you change and save
changes to inside of DEdit, and the .DAT file is the output of Processor.exe,
which prepares your world to run in the game and optimizes its performance. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Textures </span></b><span
style='font-size:10.0pt;font-family:Arial'>— LithTech uses its own form of
texture, the .DTX file. Textures can be up to 32-bit images, although you can
obviously choose to make lower-color textures. The .DTX files also contain
flags for additional information used by the engine and the game. You can
convert .PCX and .TGA files into .DTX files by importing them inside of DEdit. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Sprites </span></b><span
style='font-size:10.0pt;font-family:Arial'>— Sprites (.SPR files) consist of a
series of .DTX files linked together as an animation with a set frame rate.
They’re commonly used for animations and special effects such as smoke, bullet
holes, and liquid droplets. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Sounds </span></b><span
style='font-size:10.0pt;font-family:Arial'>— LithTech supports standard .WAV
files directly with no custom modifications. When you double-click a .WAV
inside of DEdit’s Project Window, it will open in your system’s default sound
editor so that you can preview it. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Models </span></b><span
style='font-size:10.0pt;font-family:Arial'>— Models in LithTech are in a custom
format, the .ABC file. This contains the mesh/geometry for the model and other
information used by the game engine. You create these files in an external
editor such as Maya or 3D Studio Max, then save them in the .ABC file format
using a plug-in. Use <b>ModelEdit </b>, to modify files in the .ed format once
they’ve been created. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Objects </span></b><span
style='font-size:10.0pt;font-family:Arial'>— Also known as <b>Entities </b>,
these are objects that programmers construct using code. Some of this code
exists in the engine and doesn’t appear in the project directories. However,
many objects are created in code written for the specific game. These objects
are called <b>game objects </b>(to distinguish them from the <b>engine objects </b>inside
the engine code) and are stored in a file called OBJECT.LTO in the same
directory as the project’s .DEP file. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Prefabs </span></b><span
style='font-size:10.0pt;font-family:Arial'>— A prefab is a collection of
objects, both brushes and code objects that are stored in their own .ed files
(just like a regular game world) in a separate set of directories. Anything you
make in a level can be exported as a prefab to make it easier to re-use later.
Examples are benches, camera systems, hallways, doorways, and statues. Prefabs
can be useful if your group needs a way to distribute standard-looking objects
to its members. </span></p>

<h2><a name="_Toc502717204"></a><a name="_Toc482706191"></a><a
name="_Toc500144899"></a><span style='mso-bookmark:_Toc502717204'><span
style='font-family:Arial'>Creating Brushes to Fit Your Needs </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>Our first step will be to
add a new world. Since we’ll be doing a bigger world than before, let’s call it
“Big1”. Create it just as you did in the last chapter. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Also, we will want an
appropriate texture for our floor. Go to the <b>Textures </b>tab select the <i>Floor_Ceiling</i>
container then choose the texture <i>Lino_White. </i>This is a good-sized
tiling texture that will make a good floor. Once you have it selected, go to
the Top viewport (the upper right one). Look in the Status Bar for the <b>Grid </b>box,
which shows the size of the grid blocks in the current window. Make sure that
it says <b>Grid: 64 </b>, indicating a grid block size of 64 units. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Tip:&nbsp; </span></b><span
style='font-size:10.0pt;font-family:Arial'>The Grid is a way of organizing the
placement of objects, similar to a ruler. It keeps you from laying out points
totally at random and it allows you to measure the size of the objects you’re creating
and their relative positions. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Using the grid makes for
much more efficient level layout. When you build to the grid using standard
units, your walls are more likely to line up properly and others can more
easily understand your level just by looking at it. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>If your grid setting shows
something other than 64, you’ll want to adjust the grid scaling. First,
single-click in the Top viewport to make sure that the focus is in that port.
Then, either use the <b>Expand/Shrink Grid </b>toolbar buttons or the PLUS SIGN
(+) and MINUS SIGN (-) keys on the numeric keypad to scale the grid up or down
until it’s at 64 units. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Note: </span></b><span
style='font-size:10.0pt;font-family:Arial'>Each viewport can have a different
grid setting, according to the user’s preference. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>While 64 units is a
reasonable grid block size for laying out floors, walls and ceilings in indoor
spaces, if you were working on a large, open outdoor level, 256 units might be
a more manageable grid scale. Your goal is always to use a large enough grid to
allow you to tell how big your current brush is going to be, but still small
enough to create whatever detail you’re going to create. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>You’ll want a floor that’s
about 512 units on a side, centered on the marker in the Top viewport. That
means you’ll want to make a square that’s eight grid squares on a side. Create
one now, and you should get a brush that looks like this: </span></p>

<p><span style='font-size:10.0pt;font-family:"Formata Light"'><img width=500
height=216 id="_x0000_i1030" src="DEdit_Files/image014.jpg"></span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Now that you have a floor,
the next step will be to use DEdit to make complex brushes, beyond the simple
squares that you’ve used so far. You’ll also learn tips and techniques for good
brush construction. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The simplest technique is
to use DEdit’s vertex-by-vertex brush creation method to build a brush that is
close to what you want right from when you lay the brush down. Unlike many
other editors that force you to start with simply shaped primitives such as
squares or pyramids, DEdit allows you to create a brush by placing its separate
vertices wherever you want them. While this doesn’t make it possible to
instantly create <i>anything </i>, it speeds things up a lot. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>For the next step, select a
new texture. On the Textures tab, select the texture called <i>pmtl_fc1 </i>in
the <i>Floor_Ceiling</i> container. It’s different enough from the floor
texture to make a good contrast. Then, go into one of the horizontal views
(Left or Front viewports). Press and hold the X key to move the marker up 4
grid squares above the floor, where it is now. You can press the O key to zoom
the view out further if you can’t see enough of the grid to complete this task.
Your marker is now 256 units above the floor, about the right height for a tall
and imposing support structure. Now, switch back to the Top view. </span></p>

<p><!--[if gte vml 1]><v:shape id="_x0000_s1027" type="#_x0000_t75" alt=""
 style='position:absolute;margin-left:0;margin-top:0;width:287.25pt;height:124.5pt;
 z-index:2;mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;
 mso-wrap-distance-right:9pt;mso-wrap-distance-bottom:0;
 mso-position-horizontal:left;mso-position-horizontal-relative:text;
 mso-position-vertical-relative:line' o:allowoverlap="f">
 <v:imagedata src="DEdit_Files/image016.jpg"/>
 <w:wrap type="square"/>
</v:shape><![endif]--><![if !vml]><img width=383 height=166
src="DEdit_Files/image016.jpg" align=left hspace=12 v:shapes="_x0000_s1027"><![endif]><span
style='font-size:10.0pt;font-family:Arial'>In the center of the map, create a
pillar that’s eight-sided and shaped like a rectangle with the corners cut off.
Make it 256 units thick/tall. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>This is an example of an
object that can be created quickly using DEdit but would require several steps
in most other editors. However, the ability to create brushes this way does
allow you to create brushes that DEdit and LithTech cannot properly use in
games. </span></p>

<h2><a name="_Toc502717205"></a><a name="_Toc482706192"></a><a
name="_Toc500144900"></a><span style='mso-bookmark:_Toc502717205'><span
style='font-family:Arial'>The Camera </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>So far, you’ve only done
small and simple things that haven’t required you to do too much with the DEdit
interface, but now we will discuss two key elements that you’ll be using a
lot:&nbsp; the camera and the marker, or insertion point. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>You’ve already learned to
use the camera in the three 2D viewports. To reiterate quickly, press and hold
the <b>I </b>key and move the mouse in a 2D viewport to pan the view around the
level. Press the O key and use the mouse to zoom the camera in and out. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The 3D view is more
complicated and very useful. Hover your mouse over the 3D viewport (top left).
Right now you should be seeing a very close-up view of the pillar you just
made. Press and hold the <b>I </b>key and move the mouse around slowly. The
window’s camera moves in the horizontal plane as you move the mouse. To move
vertically, press and hold the right mouse button. To move faster, press and
hold the left mouse button. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Release the <b>I </b>key.
Press and hold the <b>O </b>key, then move the mouse slowly. Now, instead of
moving, the camera turns. It operates just as the “mouse look” mode does in a
first-person game. If you’re not careful you can turn the camera completely
upside down, so be sure not to move the mouse around too wildly. Also, you can
use the left and right mouse buttons to move forward and backward along the
camera’s sight-path, respectively. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>With these controls, you
can move the camera anywhere in the map you need to see something. You can also
see the object from any angle. For now, maneuver your view so that you can
clearly see the column you created. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>There are two other
controls that set camera location. On the <b>WorldEdit </b>toolbar, these two
buttons<img width=33 height=15 id="_x0000_i1031" src="DEdit_Files/image018.jpg">&nbsp;set
the center point of the camera. The <b>Center View </b>button centers the
camera on the selected objects or brushes, or on the middle of a selected group
of objects or brushes. The <b>Center View On Marker </b>button moves the camera
so that it’s aimed at the green marker. These are useful for rapidly moving the
camera to a new location on the map, and you’ll probably find yourself using
them a lot in large maps. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Right-click on any viewport
to display the <b>Context </b>menu. Use the commands on the <b>Context </b>menu
to change the view that your camera presents in the <b>Perspective </b>viewport.
The <b>Shade Mode </b>and <b>Move Mode </b>commands both control the way that
the camera works in that port. The <b>Shade Mode </b>menu lets you switch between
textured, flat-shaded (un-textured), and wireframe views of the level. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Flat shading and wireframe
display are useful for seeing how your brushes are laid out, since textures can
obscure seams between two brushes, making some tasks difficult. These modes are
also faster in some cases, so if DEdit runs especially slowly on your machine
you may want to use them to speed things up. </span></p>

<h2><a name="_Toc502717206"></a><a name="_Toc482706193"></a><a
name="_Toc500144901"></a><span style='mso-bookmark:_Toc502717206'><span
style='font-family:Arial'>The Marker </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>The Marker controls all
aspects of where you place things, such as lights, start points, brushes, or
pasted objects, in your World. When you first worked with the marker, all your
work was done in the top viewport, but it works exactly the same in any of the
ports. It even works in the Perspective view, although most often it’s not
useful to work in that view. </span></p>

<table border=0 cellspacing=0 cellpadding=0 style='mso-cellspacing:0in;
 mso-padding-alt:0in 0in 0in 0in'>
 <tr>
  <td width=313 valign=top style='width:234.75pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:"Formata Light"'><img width=287
  height=254 id="_x0000_i1032" src="DEdit_Files/image020.gif"></span></p>
  </td>
  <td width=349 valign=top style='width:261.75pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:Arial'>Object placement in ports
  other than the top view is simple. The object being added always appears at
  the center point of the marker, and the viewports do not affect this
  functionality. However, the viewports do affect the placement of brushes. </span></p>
  <p><span style='font-size:10.0pt;font-family:Arial'>Go back to your map and
  move the marker in the Top view so that it’s one grid square south of the
  center of the column you created earlier, as in the image on the left. </span></p>
  </td>
 </tr>
</table>

<p><span style='font-size:10.0pt;font-family:Arial'>If you were going to add a
support to your column, this is probably where you’d want to add it. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Now, switch to the Front
viewport. Zoom out a little so that you have some space to work and add a brush
that is a triangular wedge with a thickness of 128 from the top of the column
and looks similar to the figure below. </span></p>

<table border=0 cellspacing=0 cellpadding=0 style='mso-cellspacing:0in;
 mso-padding-alt:0in 0in 0in 0in'>
 <tr>
  <td width=308 valign=top style='width:231.0pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:"Formata Light"'><img width=288
  height=247 id="_x0000_i1033" src="DEdit_Files/image022.gif"></span></p>
  </td>
  <td width=352 valign=top style='width:264.0pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:Arial'>Look in the top view and
  see what’s been done. What you should see is that the brush lines up exactly
  with the green marker, and its thickness of 128 units extends along the
  front/back (X axis). The marker’s location in each view defines where the
  brush starts and the thickness you specify determines how far from the marker
  it extrudes. </span></p>
  </td>
 </tr>
</table>

<p><span style='font-size:10.0pt;font-family:Arial'>By placing the marker
carefully, you can lay brushes out exactly where you want them. Although this
system of viewports and marker is somewhat different from many of the
traditional editing tools, it’s also very powerful once you get used to it.
Remember always to be aware of where the marker is and where you need it to be.
</span></p>

<h3><a name="_Toc502717207"><span style='font-family:Arial'>Adding Primitives </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>One last way of creating a
new brush is to insert a <b>primitive </b>into the map. Primitives are pre-defined
shapes that can be used instead of placing vertices. The main purpose of this
is to quickly add brushes that would otherwise be very complex to build. You
can add five shapes:&nbsp; Cubes, Cylinders, Pyramids, Spheres, or Domes. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>To add a primitive, go to
the <b>Brush </b>menu and choose <b>Add Primitive </b>. Select one of the
primitive types. You’ll get a dialog that asks for a few options to set up the
brush, and then the primitive appears at the marker. One difference between
creating a brush this way and making it using Brush mode is that primitives
come in un-textured. Be sure to apply the proper texture to your primitive once
you’ve inserted it. To do so, select the new primitive and press <b>CTRL+T </b>.
</span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Note </span></b><span
style='font-size:10.0pt;font-family:Arial'>:&nbsp; You may be tempted to fill
your level with lots of domes and 20-sided columns, but be sure to read about
optimizing performance in your levels <i>before </i>you do this. These objects
can create great beauty where they’re used, but used in the wrong place they
can create big problems with your level’s performance. </span></p>

<h2><a name="_Toc502717208"></a><a name="_Toc482706194"></a><a
name="_Toc500144902"></a><span style='mso-bookmark:_Toc502717208'><span
style='font-family:Arial'>Selecting Brushes </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>To select a brush,
left-click on it. In any of the viewports, move your mouse over the brush you
want to select. If there are brushes stacked on top of each other, DEdit tries
to pick the one it thinks you want. If a big brush is in front of a smaller
brush, clicking inside the smaller one will select it even though the bigger
one is “closer” to you. You can select brushes in order of their depth in the
current viewport by pressing the T key when you click. In other words, if two
identical brushes are stacked on top of each other in the current view, the <b>T+left-click
</b>combination would select the one closest to the “front” of the view, and
subsequent clicks would select the brushes behind that one. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>One way of speeding up your
work is to select multiple objects or brushes at once. The primary way to do
this is using multi-select mode. In the <b>Mode </b>menu, select the <b>Multiple
Node Selection&nbsp; </b>command. While you’re in this mode, selecting an
object no longer de-selects the objects you have previously selected. With <b>Multiple
Node Selection </b>chosen, when you select a new object it’s <i>added </i>to
the selection. If you mistakenly add a brush to your selection, hold down the
CTRL button and left-click on it again to remove it from the selection. It can
be difficult sometimes to select the brush you want, and you can accidentally
select the wrong brush. Pressing the <b>U </b>key de-selects all brushes, after
which you can select the single brush you want to work with. Be sure to use the
camera in Perspective view and press the <b>U </b>key frequently to be sure
that you don’t grab the wrong brushes. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>You can press and hold the <b>CTRL
</b>button while clicking on brushes to add them to your selection. While the <b>CTRL
</b>key is pressed, you can click any brush again to remove it from the
selection. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Another way to select a
group of brushes at once is by using a block selection, which can be used in
any mode. Move the mouse into the top view, then left-click and drag out a
rectangle that covers the pillar in the center of the level as well as the
support you added before. You will see a white highlight that outlines the area
you’re selecting. Once you release the mouse button, all the objects under the
highlight are selected. In the case of brushes, a brush only becomes selected
when the highlight touches one of its corners, so you can select a brush that’s
on top of a larger brush without selecting the brush below it. </span></p>

<table border=0 cellspacing=0 cellpadding=0 style='mso-cellspacing:0in;
 mso-padding-alt:0in 0in 0in 0in'>
 <tr>
  <td width=237 valign=top style='width:177.75pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:"Formata Light"'><img width=216
  height=358 id="_x0000_i1034" src="DEdit_Files/image024.gif"></span></p>
  <p><b><span style='font-size:10.0pt;font-family:Arial'>Project Window </span></b><i><span
  style='font-size:7.5pt;font-family:Arial'>with </span></i><b><span
  style='font-size:10.0pt;font-family:Arial'>Nodes </span></b><i><span
  style='font-size:7.5pt;font-family:Arial'>tab open </span></i></p>
  </td>
  <td width=411 valign=top style='width:308.25pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:Arial'>Lastly, you can use the
  Nodes tab in the Project window to select and find objects by name instead of
  having to find them visually. Click the Nodes tab to switch to it and examine
  what looks like a tree diagram of your whole level. </span></p>
  <p><span style='font-size:10.0pt;font-family:Arial'>The list you see shows
  all of the brushes and objects in your level. Each of the names has a box and
  a symbol next to it. Move the camera in one of your views out so that you can
  see the whole level. Then, click on the box next to the object called
  “Brush1.” Two things happen. First, a check mark appears in the box and its
  name is highlighted. Second, one of the brushes (your pillar) is selected. </span></p>
  <p><span style='font-size:10.0pt;font-family:Arial'>This way of selecting
  things is useful on larger levels, where you may know what brush you’d like
  to select, but can’t easily jump to it to select it. In that case, you can
  then use the Center View button (described earlier) to quickly center your
  views on the brush. You can do many other things </span></p>
  </td>
 </tr>
</table>

<p><span style='font-size:10.0pt;font-family:Arial'>with the Nodes tab to
organize your level as well. The Nodes tab is covered in greater detail later
in this chapter. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The last major method for
selecting brushes and other objects is via the <i>Selection </i>menu. The menu
provides useful commands for working with several brushes at once, as well as a
few commands for organizing your brushes. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The first two commands, <b>All
</b>and <b>None, </b>are straightforward. Clicking <b>None </b>behaves exactly
the same as pressing the U key:&nbsp; it clears all selections. If you choose <b>All
</b>, then DEdit selects everything in the level:&nbsp; all objects and all
brushes. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The <b>Inverse </b>command
inverts the selection so that everything selected is unselected and vice versa.
</span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The <b>Container </b>command
tells DEdit to select an object’s parent object in the Nodes tree. You can use
container objects to organize the objects in your maps without affecting the
way the map works. You can read about using containers in the section on using
and understanding nodes. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The <b>Advanced </b>command
displays a dialog that will help you find objects and brushes based on their
name or type. This is another feature designed to help you find objects in
large levels where you may not be able to locate something right away visually,
or to find large groups of objects quickly. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The <b>Hide </b>and <b>Unhide
Selected </b>commands let you hide selected parts of the level from view if
you’re not currently working on them. This will help your editor run a bit
faster, and can help you to see parts of the level that would otherwise be hard
to view with your camera. You can also use these commands to accomplish some
complex tasks with carving and geometry mode (which you’ll learn about later).
Since a hidden object isn’t affected by most actions while it’s hidden, hiding
brushes can be used (like masking tape in painting) to protect certain brushes
from work you’re doing on other nearby brushes. This is another command that
you’ll read more about in the Nodes section. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The <b>Hide Inverse </b>and
<b>Unhide Inverse </b>commands are just like the above commands, but they
operate on anything that you have <i>not </i>selected. They are commonly used
for hiding items other than the ones you’re currently working on. For example,
in cases where you’re working on only a small area of a large level, you can
speed things up by hiding the rest of the level. It can also be useful to hide
other brushes when you need to do work on the geometry of a brush that’s too
tightly packed in among others to easily find its vertices. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The <b>Mirror </b>command
allows you to flip a shape or group of objects in a level. You can use the
mirroring commands on any brush, object, or group of brushes and objects. We’ll
discuss the <b>Mirror </b>command later. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The <b>Save as Prefab </b>command
takes the currently selected objects and brushes and stores them as a Prefab in
their own file so that you can use them in other levels, or in other places in
the current levels. Once you’ve saved a Prefab into its own file, you can then
import the prefab again using the <b>File </b>menu <b>Import World </b>command.
Prefabs can be as simple as a vending machine or as complex as an entire room
complete with lights and characters. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The <b>Generate Unique
Names </b>command creates a unique name for objects that have identical names.
In cases such as AI paths and scripting, this can be important, since some
objects use the names of other objects to select them as a target, to move
them, or to send them messages. Unless you’re working on such tasks, you
shouldn’t have to use this command. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The <b>Group Selection </b>command
(related to the <b>Container </b>command) adds a new container object and
groups the selected objects together in it. This command is very helpful for
sorting large levels or rooms into smaller parts. See the <i>Nodes </i>section
of this document to learn more about containers and their use. </span></p>

<h2><a name="_Toc502717209"></a><a name="_Toc482706195"></a><a
name="_Toc500144903"></a><span style='mso-bookmark:_Toc502717209'><span
style='font-family:Arial'>Manipulating Brushes </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>In addition to the grab handle
at the center of each brush, there are several other ways to rearrange your
brushes in the editor. Use the M key to move selected objects, including
brushes. Press and hold the M key, and then click and drag with the mouse to
move the objects wherever you drag them. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>You can also rotate your
brushes, which is very useful when building symmetrical areas. As an example,
assume you want to make a second copy of your pillar and its support but facing
the opposite way. The slow way would be to lay out each brush again by hand,
which would be tedious. The faster way would be to copy the current brush, then
just rotate it into the new position. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Switch to multi-select mode
(using either the toolbar buttons or <b>Mode </b>menu <b>Multiple Node
Selection </b>command. Select the pillar brush, and then select the support
brush. Once you have them both selected, press <b>CTRL+C </b>to copy them.
Since you don’t want to insert the brushes at the green marker when you paste
them, from the <b>Edit </b>menu use the <b>Alternate Paste </b>command. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>When you perform an
Alternate Paste, DEdit pastes the object into the current world at the
coordinates where it was copied out instead of at the marker. This is most
useful in two cases. First, when you want to rotate or realign the brush
slightly in relation to the original. Second, in cases where the new brush will
be in a new world, but be in the same exact position there as the old brush was
in the old world. For example, you might want to copy or paste parts of your
world into a test world, just to try a few ideas without modifying the original
world’s design. You would not want to align rooms, lights, and so on by
adjusting the green marker for each paste operation. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Press <b>CTRL+ALT+V </b>to
paste in the new brush. The selection will flicker, but since you pasted into
exactly the same place that you cut from, nothing will appear to change. Next,
go into the top view and move the marker so that it’s right at the tip of the
support brush: </span></p>

<p><span style='font-size:10.0pt;font-family:"Formata Light"'><img width=287
height=254 id="_x0000_i1035" src="DEdit_Files/image026.gif"></span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Right-click in the top view
and select <b>Rotate Selection </b>. Since we want to make an archway out of
the two pillars, enter 180 in the <b>Degrees </b>box that appears. When you
click <b>OK </b>, you’ll see your selection move. If you use the camera in the
Perspective viewport to look at what’s happened, you’ll see that there’s now a
mirror image of the pillar on the opposite side of the original. Notice that
the marker defines the center around which the brush is rotated. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Note:&nbsp; </span></b><span
style='font-size:10.0pt;font-family:Arial'>You can also hold down the <b>N </b>key
to rotate the selected objects, but since this rotates the brush in very small
increments you must be careful to rotate neatly. It’s difficult to rotate an
object by exactly 90 degrees by hand; using the menu command is generally
faster and more accurate. Additionally, you can hold down <b>SHIFT+N </b>to
rotate in 15-degree increments. The most important thing to remember about
rotations is that if your rotation operation leaves brush vertices off the
grid, then precision errors can occur during processing. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Another way to flip objects
is to use <b>Mirror </b>&nbsp;commands in the <b>Selection </b>menu. This
method works well for brushes that are not symmetrical enough to rotate, such
as a brush that’s beveled on one edge in order to meet up neatly at a corner.
Each command flips the brush along a different axis relative to the world. It
doesn’t matter which viewport you use the mirroring commands in, since the flip
axis is relative to the world, not the viewport. A top/bottom mirror inverts
the brush along its Y-axis, a front/back mirror along the X-axis, and so on. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Resizing a brush (which
you’ll want to do now, since your level’s floor is too small) is done using the
drag handles on the edges and corners of a brush. Press the <b>U </b>key to
unselect everything, then select the brush that makes the floor of your level.
You will see filled boxes appear at each corner and on each edge that look just
like the one in the middle for moving the brush. The ones on the edges are for
stretching the brush in the direction of that axis. The handles on the corners
allow for resizing in both directions at once. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Go to the top view and
resize your floor brush with the drag handles until it is four times its
current size on each of the edges and it is underneath both of your pillars so
that players can walk underneath them. You should get something like the
picture below. It may also be useful to make the grid size larger (128 or 256)
to simplify resizing the brush properly. </span></p>

<p><!--[if gte vml 1]><v:shape id="_x0000_s1028" type="#_x0000_t75" alt=""
 style='position:absolute;margin-left:0;margin-top:0;width:215.25pt;height:191.25pt;
 z-index:3;mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;
 mso-wrap-distance-right:9pt;mso-wrap-distance-bottom:0;
 mso-position-horizontal:left;mso-position-horizontal-relative:text;
 mso-position-vertical-relative:line' o:allowoverlap="f">
 <v:imagedata src="DEdit_Files/image028.gif"/>
 <w:wrap type="square"/>
</v:shape><![endif]--><![if !vml]><img width=287 height=255
src="DEdit_Files/image028.gif" align=left hspace=12 v:shapes="_x0000_s1028"><![endif]><span
style='font-size:10.0pt;font-family:Arial'>Having the two types of drag handles
helps when you want to either quickly resize a brush in multiple dimensions
like your floor (corner) or resize it in only one direction as you’d do if you
extended a hallway (edge). These handles appear around any group of things in
the world, including objects. You can use the drag handles to widen a circle of
lights or spread out a group of start points as well as using it to increase
the size of a brush. You can even mirror a brush by dragging it inside out.
DEdit is smart enough to flip the face normals of the brush so that they still
end up pointing outward as they should. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>However, one thing that can
happen when resizing a group of brushes is that you can re-shape some of the
brushes in ways that you didn’t intend. For example, select both the floor
brush and the right hand pillar in your level. Drag the right edge resize
handle to the right by one square. What you should see is that not only does
the pillar grow, it also moves to the right. This is because DEdit treats the
entire group selection as one scalable object/brush. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>That sort of movement, if
you’re not aware of it, can cause leaks&nbsp;when you use the handles to resize
a hallway whose floors and ceilings aren’t all the same length. For the same
reason, you don’t want to use these handles to move a pair of walls to <i>narrow
</i>a hallway. The walls thicken or shrink as they’re moved, and not usually by
nice, neat increments. A pair of walls that began as 32 units thick each and
128 units apart might end up 196 units apart as you intend, but be 45 units
thick each. That’s not a unit that will be easy to fit textures to or align
with your other walls and floors. Conversely, if you scale a lamp post that has
a lens flare sprite attached at just the right location, resizing the lamp post
and the sprite as a group will ensure that the sprite stays as the proper
location. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>This brings up the last
possible problem with resizing objects. If a brush has vertices that fall on
points that wouldn’t line up with even a 1x1 grid spacing (the smallest DEdit
and LithTech can handle without possibly producing precision errors; see the
section of this chapter on problem brushes), the Processor may have some
trouble getting the corners of the brush’s faces to line up when the level is
processed. This can cause gaps to appear between faces and may also cause level
leaks. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Note: </span></b><span
style='font-size:10.0pt;font-family:Arial'>You should undo your resize by
hitting <b>CTRL+Z </b>in order to return your column to its proper size now. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>If you do use the drag
handles to resize an object, make sure you verify that all of the moved
vertices wind up on the grid. If you can’t, be sure to correct the error by
shifting vertices back onto the grid in Geometry Mode as described in the
following section on brush manipulation power tools. </span></p>

<h2><a name="_Toc502717210"></a><a name="_Toc482706196"></a><a
name="_Toc500144904"></a><span style='mso-bookmark:_Toc502717210'><span
style='font-family:Arial'>Brush Power Tools </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>Even with DEdit’s
primitives and its vertex-by-vertex brush layout tool, you still can’t create
all of the brushes you want in a single step. DEdit has four main tools for
changing the actual shape of a brush:&nbsp; Hollowing, Carving, Splitting and
Geometry Mode. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The reason that these tools
are in a section called “Power Tools” is because that’s what they are. While
they are very useful tools, they are also very effective for destroying
brushes, making your levels slower to process and slower to run, and making bad
designs worse. As in carpentry, think twice before you cut. Be sure of what you
will get before using these tools. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Using hollowing, you can
empty the inside of a brush, like hollowing out a pumpkin. For a demonstration
of how to use this technique, you can very quickly build a box around your
entire level to contain it for processing. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>First, raise the marker
about 128 units above the tops of your columns. Then, zoom out your Top view
until you can see all of your level’s brushes and a little space around it.
Re-select the texture you used for the floor of the level, since the texture of
your pillars and supports is a bit too dark for easy viewing. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Draw a square brush that
surrounds the whole level in the top view and make it 1024 units tall. That’ll
make it large enough to contain the whole level with some space left over. Now,
with the big new brush (and nothing else) selected, select <b>Hollow </b>from
the <b>Brush </b>menu. When prompted, enter </span><b><span style='font-size:
10.0pt;font-family:"Courier New"'>64 </span></b><span style='font-size:10.0pt;
font-family:Arial'>for the new brush thickness. This is the thickness of the walls
of the brush, which will be created around the brush. Then the original brush
is deleted. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>You’re probably annoyed
that you’ve been taught to create rooms using the slower method of laying out
each of your wall brushes and ceilings by hand instead of just creating and
hollowing cubes. However, if you look at the created brushes, you’ll see that
DEdit created brushes whose edges are beveled instead of straight. This is to
fit them together neatly with the minimum number of faces visible, although in some
cases hollowing can drive up the number of faces on your brushes, leading to
higher polygon counts inside your game. Also, because of the beveled edges,
hollowed rooms must be resized by moving vertices, instead of by scaling whole
brushes. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Hollowing can be useful,
especially when the bevels fit in with the design of your room, or are in areas
that won’t affect the rest of the layout. If you’re using it in an area of the
map that you plan on changing a great deal, consider building your brushes by
hand instead. It’s usually neater even if it is slower. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Your next tool is <b>carving
</b>, also known as <b>CSG Subtraction </b>. It’s similar to hollowing and the
two can even be used interchangeably for some purposes. However, as with
hollowing, it can often produce unintentional results. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>In order to carve a brush,
first you need to create the brush to be carved. Next, you need to create a
second brush that will serve as a tool to carve <i>with </i>. As you may guess
from the name of the operation, the volume of the second brush will be <b>subtracted
</b>from the volume of the first brush. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>As an example, you can
bevel an edge off of the top of your two pillars to give them a little more of
an interesting look. Select one of your triangular supports. Copy ( <b>CTRL+C </b>)
and Alternate Paste ( <b>CTRL+ALT+V </b>) it, then move ( <b>M </b>) it so that
it overlaps the outside edge of the support. </span></p>

<p><span style='font-size:10.0pt;font-family:"Formata Light"'><img width=497
height=209 id="_x0000_i1036" src="DEdit_Files/image030.jpg"></span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Resize the copied support so
that its edge is a 45-degree slope in the Front view, then resize it in the top
view so that it overhangs the north and south edges of the pillar a little. You
should get a brush that looks like this: </span></p>

<p><span style='font-size:10.0pt;font-family:"Formata Light"'><img width=497
height=210 id="_x0000_i1037" src="DEdit_Files/image032.jpg"></span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The purpose of the overhang
is to make sure that the brush cleanly carves the surface of the pillar. It’s
not necessary, but it’s a good idea. DEdit may occasionally create a bad edge
or face when using carving, and overhanging a little helps to minimize the
chances of this. If it does happen to you, use undo to back up and then try
resizing your carving brush to overhang the area where the problem appeared if
it’s possible to do so. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>If you can’t overlap the carving
brush for some reason, see the section on fixing damaged brushes later in this
chapter. It includes techniques that might help you fix any damaged brushes
that result. You may also be able to use splitting planes (which you’ll learn
about next) to do what’s needed. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Notice that your carving
brush only touches the pillar and not any of the other brushes in the level.
That’s because carving with a brush cuts its shape out of any other brushes
it’s touching. Make sure that your carving brush isn’t touching anything you
don’t want to carve. You can select both the column and the carving brush, then
use the <b>Hide Inverse </b>command on the <b>Selection </b>menu to hide
brushes that are in the way. Then select any brush and use the <b>Unhide
Inverse </b>command to bring them all back. Alternately, you can move the
carving brush and the brush to be carved to an area of the level that’s open
enough to avoid the problem and move them back when you’re done. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Once you have the carving
brush in place (make sure <i>only </i>the carving brush is selected), press <b>H
</b>or use the <b>Carve </b>command on the <b>Brush </b>menu. Move the carving
brush away from the column and look at the result. What you should see is that
a new edge has been carved off of the column, leaving a large beveled edge. As
with resizing brushes, it’s a good idea to line your carve up so that any new
vertices stay on the grid, although this is most often a problem for brushes
you plan on doing more to after the carve. If you’re building chunks of rubble,
you may not care as much about the results being on the grid. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>This technique can be used
with more complex shapes as well. If you stick a cylinder-shaped brush into a
wall to make a doorway or into a ceiling to make a window, you can create some
very complex effects quite quickly. However, as with hollowing, your decisions
on how to lay out brushes are very often better than the computer’s, and your
cuts are probably going to be neater and easier to understand. The splitting
planes tool, your next power tool, is designed with exactly that in mind. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Note:&nbsp; </span></b><span
style='font-size:10.0pt;font-family:Arial'>You might want to create some
brushes outside the current map and try playing with carving for a little bit
to better familiarize yourself with how it tends to cut before moving on. Try
more complex carving shapes and carving multiple brushes at once. Be sure to
watch the brushes that you get as a result. To more easily view the splits on
your brush faces, turn off the textures. Right-click on the <b>Perspective </b>viewport,
choose <b>Shade Mode </b>and then click <b>Flat Polies </b>. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The splitting plane tool is
like carving, except that instead of using a full brush to remove a section
from other brushes, you use a single plane as a saw to cut brushes into pieces.
Although this tool only cuts along a single plane, it’s a very useful and
refined device for making complicated brushes for two reasons. First, it
doesn’t require the creation of a cutting brush. Second, it allows you to pick
the exact position and order of the cuts as they’re being applied instead of
letting DEdit make the decisions. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>To see the tool in action,
select the pillar whose edge hasn’t been beveled off yet. Splitting planes only
splits through the brushes that are currently selected, so they can be used
even in crowded parts of your level without the problems inherent in carving. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Next, you need to draw a
splitting plane that’s located where you want your cut to be. Since we’re
trying to be symmetrical with the other side, our cut should cut off the
outside corner from two grid lines in at the top to two squares down on the
side, a 45-degree angle cut. To define your cutting plane, you do as you’d do
if you were starting to create a new brush along the line to be carved:&nbsp;
Go to the Front viewport and press <b>SPACE </b>to define a line between the
two points where you want the cut: </span></p>

<p><span style='font-size:10.0pt;font-family:"Formata Light"'><img width=288
height=247 id="_x0000_i1038" src="DEdit_Files/image034.gif"></span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Make sure you only define
two points on the line, since splitting only uses the first segment of the line
to split on and will ignore any later segments. Use <b>SPACE </b>to place the
first spot, then move the mouse to your second spot and press <b>SPACE </b>again
to define the second point. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Note: </span></b><i><span
style='font-size:10.0pt;font-family:Arial'>&nbsp; </span></i><span
style='font-size:10.0pt;font-family:Arial'>Splitting occurs along an infinite
plane defined by the two points you place. You do not need to ensure that you
overlap all selected brushes or make the line the full length of the split
you’re creating. Just make sure that the two points you choose are on the exact
line that you want. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Once you have your split
line defined, press <b>S </b>to perform the split. Your selection will be
cleared, and instead of one brush you now have two:&nbsp; a pillar with a
beveled edge and a wedge of pillar that’s been cut cleanly off. If you select
and delete the wedge, you’ll have a pillar that’s a mirror of the pillar on the
opposite side. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>For a more complex case,
imagine that you want the floor of your level to float in space. Now, imagine
that you want to blow off a corner of the platform to make it appear damaged.
What is the best and cleanest way to do it? </span></p>

<p><span style='font-size:10.0pt;font-family:"Formata Light"'><img width=497
height=216 id="_x0000_i1039" src="DEdit_Files/image036.jpg"></span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>First, select the floor
brush. Now, go into the top view and center in on the 4 squares in the lower
left hand corner of the brush. Once you have a good view of them, split the
brush vertically at the edge of the second square in from the left. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Select the smaller of the
two resulting brushes (the left-hand one) and split the bottom two squares off
so that you have a rectangle above a small square that forms the lower left
corner of your floor. What we’re doing is isolating the rest of the brush from
the area we’re going to work on. This is important, since one of the things we
want to add is a splintered, irregular edge. Always choose carefully where you
make your cuts. Otherwise, in this case, the whole floor here would be
splintered and irregular which would drive up polygon counts and look ugly. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Now, select the square that
you created. Zoom in on the square and lower your working grid size in the top
viewport to 32 units so you can create smaller cuts. Now, using the splitting
tool, carve up the brush and delete any excess bits until you have a nice
jagged corner like this one. </span></p>

<p><span style='font-size:10.0pt;font-family:"Formata Light"'><img width=497
height=216 id="_x0000_i1040" src="DEdit_Files/image038.jpg"></span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>You may want to use the
flat shade view in your Perspective viewport again to do your carving, since
it’ll be easier to select items that way. Note that you can now create a pretty
complex shape without destroying the rest of the floor. Imagine what the floor
would have looked like if you had used carving instead of splitting. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>DEdit’s last brush power
tool, which you’ll use to fine-tune the raggedness of your destroyed corner, is
called Geometry Mode. Unlike Brush Mode, where each operation works on a whole
brush at a time, Geometry Mode&nbsp;works on a single face, edge or vertex of a
brush at a time. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Press <b>CTRL+G </b>to
switch to Geometry mode. Move your mouse around in the Perspective viewport and
watch what happens. What you should see is red highlights around the brush
faces as you pass over them. You will also see green highlights on nearby edges
and vertices. For the most part, you don’t make normal selections in Geometry
mode the way you do in Brush or Object mode. The red highlight is DEdit’s way
of indicating where the focus is instead. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>In the Top viewport, move
the mouse over the end of the triangle on the upper left edge of the jagged
area. Get the mouse over the tip of the triangle that juts out of the corner
into space. You’ll want to move that point so that the jagged edge sticks out
further into space and looks more torn. Press and hold the <b>M </b>key, then
click and drag the point of the triangle a grid line to the left. </span></p>

<p><span style='font-size:10.0pt;font-family:"Formata Light"'><img width=497
height=217 id="_x0000_i1041" src="DEdit_Files/image040.jpg"></span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>What you’ve done is move
the two vertices that make up the point of the brush over to the right.
Something you may also notice is that you actually moved two vertices, not just
one. You moved the vertex on the top face and the vertex on the bottom face,
which was directly below it in the top view. DEdit knows that since the vertex
on top had another vertex directly connected to it that was below it, you
probably wanted to move the whole edge. DEdit only makes this assumption when
the vertices are both on the same brush and are directly connected by an edge.
In order to move vertices that aren’t linked this way in a single step, you
have to select them a different way. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The right corner of the
triangle you just resized butts up against the corner of another brush. Get
that corner in view in the top pane. Then hold down the left mouse button and
drag out a rectangle that surrounds that corner. Be careful to only select the
one corner, and not any other vertices. When you release the key, you’ll see a
yellow dot indicating that the vertex is now selected. If you use the other
viewports, you’ll see that all the vertices at that point are selected, whether
they’re on the same brush or not. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The nice thing about this
is that you can now move all of them as a single unit. Press and hold the <b>S </b>key
and drag the yellow dot to the right by one grid space. You should see that
both brushes change shape when you do this. It’s important to know what
vertices you’ve selected when using this method, since it’s easy to grab the
wrong ones. If you have trouble, you can always hide the surrounding brushes to
make it easier. Remember, <b>M </b>moves the vertex you click on (and those
below it if connected via an edge) while <b>S </b>moves the vertices you have
selected. </span></p>

<p><!--[if gte vml 1]><v:shape id="_x0000_s1029" type="#_x0000_t75" alt=""
 style='position:absolute;margin-left:0;margin-top:0;width:225pt;height:189.75pt;
 z-index:4;mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;
 mso-wrap-distance-right:9pt;mso-wrap-distance-bottom:0;
 mso-position-horizontal:left;mso-position-horizontal-relative:text;
 mso-position-vertical-relative:line' o:allowoverlap="f">
 <v:imagedata src="DEdit_Files/image042.gif"/>
 <w:wrap type="square"/>
</v:shape><![endif]--><![if !vml]><img width=300 height=253
src="DEdit_Files/image042.gif" align=left hspace=12 v:shapes="_x0000_s1029"><![endif]><span
style='font-size:10.0pt;font-family:Arial'>Now, press <b>U </b>to unselect the
vertices you currently have selected. Go back to the triangle that you
re-shaped before. Use the same technique to select its tip. However, instead of
moving it left/right, you’ll be moving it downwards. Go into the Front
viewport. Press the <b>S </b>key to drag the two vertices down three grid
lines. In the Perspective view, use the camera to look at the result. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>What you’ve done is bend
your original brush downwards to make it droop. This is where the real power of
Geometry mode comes in:&nbsp; You have the ability to totally re-shape a brush
down to its smallest features. You can use Geometry mode to fix brushes when
their vertices don’t line up with the grid, to resize irregular objects and to
repair all kinds of problems. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>One other way to select
objects in Geometry Mode is to use the <b>Y </b>key to highlight all the
vertices on a single face. Move the mouse over a face so that it’s highlighted,
then press <b>Y </b>. What you see is that all the vertices on that face are
now selected. This is the method most commonly used in DEdit to skew a
brush:&nbsp; you select the face and then use the <b>S </b>key to move it
around, skewing the brush. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The last area where
Geometry Mode is highly useful is face-by-face texture management. There are
cases where applying a single texture to a whole brush won’t get the result you
want. For example, perhaps you want to darken the edges of your ragged corner. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>In the Perspective
viewport, highlight the side of one of your pillars. Next, right-click and
choose <i>Select Texture </i>from the context menu. If you now go to the <b>Textures
</b>tab, you’ll see that the texture on the pillar is now the active one. Using
this tool helps you to quickly grab a texture without needing to know where
it’s located in your texture tree. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Move the camera so that you
can see the edges of your ragged corner. </span></p>

<p><!--[if gte vml 1]><v:shape id="_x0000_s1030" type="#_x0000_t75" alt=""
 style='position:absolute;margin-left:0;margin-top:0;width:224.25pt;height:191.25pt;
 z-index:5;mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;
 mso-wrap-distance-right:9pt;mso-wrap-distance-bottom:0;
 mso-position-horizontal:left;mso-position-horizontal-relative:text;
 mso-position-vertical-relative:line' o:allowoverlap="f">
 <v:imagedata src="DEdit_Files/image044.gif"/>
 <w:wrap type="square"/>
</v:shape><![endif]--><![if !vml]><img width=299 height=255
src="DEdit_Files/image044.gif" align=left hspace=12 v:shapes="_x0000_s1030"><![endif]><span
style='font-size:10.0pt;font-family:Arial'>Hover the mouse over one of the edge
faces of your ragged brushes and press <b>CTRL+T </b>. The highlighted edge now
has the dark texture on it. By moving the mouse and camera you can quickly
re-texture all of the brushes to the new, dark texture. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Since Geometry mode is such
a powerful tool, it also allows you to damage brushes and create objects that
the LithTech engine can’t run. DEdit assumes that users in Geometry mode are
experts doing things for a reason, so it allows them to do actions that might
cause problems because it thinks that is what they want to do. You can probably
easily imagine ways to make concave brushes using Geometry mode, but there are
more subtle problems you can cause using this mode as well. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Do not use Geometry mode to
mirror brushes. If you select a face or group of vertices and drag them so that
the brush becomes inverted, the brush will literally turn inside out, with the <b>normals
</b>&nbsp;of each face towards the center, resulting in a bad brush when
compiled. </span></p>

<table border=0 cellspacing=0 cellpadding=0 style='mso-cellspacing:0in;
 mso-padding-alt:0in 0in 0in 0in'>
 <tr>
  <td width=253 valign=top style='width:189.75pt;padding:0in 0in 0in 0in'>
  <p class=MsoNormal><!--[if gte vml 1]><v:shape id="_x0000_s1031" type="#_x0000_t75"
   alt="" style='position:absolute;margin-left:0;margin-top:0;width:164.25pt;
   height:56.25pt;z-index:6;mso-wrap-distance-left:0;mso-wrap-distance-top:0;
   mso-wrap-distance-right:0;mso-wrap-distance-bottom:0;
   mso-position-horizontal:left;mso-position-horizontal-relative:text;
   mso-position-vertical-relative:line' o:allowoverlap="f">
   <v:imagedata src="DEdit_Files/image045.gif"/>
   <w:wrap type="square"/>
  </v:shape><![endif]--><![if !vml]><img width=219 height=75
  src="DEdit_Files/image045.gif" align=left v:shapes="_x0000_s1031"><![endif]></p>
  </td>
  <td width=402 valign=top style='width:301.5pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:Arial'>Do not twist the faces of
  a brush. This is a hard concept to demonstrate. Say you have a face that’s
  rectangular, and you pull one of the vertices straight downwards, as in <b>Fig.
  A </b>. What results is a twisted face. </span></p>
  </td>
 </tr>
</table>

<p><span style='font-size:10.0pt;font-family:Arial'>Since faces must be totally
flat, you have effectively split this one face into two without creating an
edge to separate the new faces. To DEdit this will register as a concave brush,
and Processor will not be able to properly compile it. Twisted faces are
probably the most common kind of Geometry mode problem, and the hardest to spot
in many cases. Open the <b>World </b>menu, select <b>Debug </b>and click the <b>Find
Concave Brushes </b>command to double-check your work occasionally if you’re
working heavily in Geometry mode. If DEdit complains about a brush and you
can’t see anything wrong with it, chances are good that you have twisted a
face. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>You can delete faces and
individual vertices, but unless you really, <i>exactly </i>and specifically
know what you’re doing, <i>do not do this </i>. More often than not, you’ll
create a bad brush. There are tools to do this in the <b>Debug </b>and <b>Special
</b>submenus under the <b>World </b>menu for fixing the problems that can
result. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Geometry mode is very
effective for doing many things that otherwise simply couldn’t be done, but
it’s also very easy to do serious damage with it. It’s the most powerful of the
power tools, and as such should be used with plenty of care and attention. </span></p>

<h2><a name="_Toc502717211"></a><a name="_Toc482706197"></a><a
name="_Toc500144905"></a><span style='mso-bookmark:_Toc502717211'><span
style='font-family:Arial'>Advanced Texturing and Alignment </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>So far, most of the
texturing that you’ve done has been relatively simple, but DEdit supports more
intricate texture work as well, both on a brush-by-brush level and on a
face-by-face level. You’ve seen how to texture whole brushes, as well as how to
texture single faces. You’ve also learned to select a texture off of a face
without having to find it in the <b>Textures </b>tab. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>&nbsp;Even when you follow
all the rules of good brush layout and level design, some textures don’t line
up where you want them to be when you first apply them. Either the texture’s edges
don’t line up with the edges of the brush, the only texture that has the symbol
you want on it is too large, or a crate is rotated off the grid and its
textures are not. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>This section will show you
how to scale, rotate, offset and flip textures. In Brush mode, select the
largest piece of the floor under your pillars. Get a good view of the brush in
the Perspective viewport, then right-click. In the context menu, select <b>Map
Texture Coordinates. </b></span></p>

<p><!--[if gte vml 1]><v:shape id="_x0000_s1032" type="#_x0000_t75" alt=""
 style='position:absolute;margin-left:0;margin-top:0;width:258.75pt;height:148.5pt;
 z-index:7;mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;
 mso-wrap-distance-right:9pt;mso-wrap-distance-bottom:0;
 mso-position-horizontal:left;mso-position-horizontal-relative:text;
 mso-position-vertical-relative:line' o:allowoverlap="f">
 <v:imagedata src="DEdit_Files/image046.gif"/>
 <w:wrap type="square"/>
</v:shape><![endif]--><![if !vml]><img width=345 height=198
src="DEdit_Files/image046.gif" align=left hspace=12 v:shapes="_x0000_s1032"><![endif]><span
style='font-size:10.0pt;font-family:Arial'>You can use this dialog in either
Brush or Geometry mode. In Brush mode, the settings affect all the faces on the
brush. In Geometry mode, this same dialog can change each face individually.
Instead of selecting the face you want, just highlight it in red by hovering
the mouse over it in the Perspective port, then right-click. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The dialog’s controls are
mostly intuitive. The U/V offset controls tell you about the alignment of
textures on a face. U (horizontal) and V (vertical) offsets are used to move
the texture around on the face pixel by pixel. You can apply a negative or
positive offset, which allows you to move a texture in any direction along a
face. They are especially useful for things like aligning a sign to properly
fit the brush you’ve created for it. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>For instance, a texture may
perfectly fit the brush but hang a little off-center:&nbsp; say, 4 pixels too
low and 8 pixels too far to the left. To correct this, you would add to the U
and V offsets. Setting the U offset to 8 would move the texture 8 pixels across
the face to the right, and setting the V offset to -4 would move the texture up
4 pixels on the face. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>This isn’t something you
want to use for all of your textures; it’s much better to build such that the
bulk of your textures fall naturally along brush boundaries so that you don’t
even need to think about texture alignment on most of your brushes. It’s meant
to be used for detailed, standout objects like crates, signs and display
screens which are often set at odd locations and need to be exactly aligned. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The next control, the
Rotation control is what you use to align a texture on a brush that’s been
rotated. Perhaps you’ve made a poster that’s hanging on a wall at a slightly
weird angle of 17 degrees to make the room look a little unkempt. By applying a
17-degree rotation to the texture of the poster, you can get the poster to look
as it should, properly lined up on the brush. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The next controls are the U
and V scaling controls. By default, these are each set to the horizontal and
vertical size of the texture on the current face in pixels. However, by
changing these values you can change the size of a texture in the world. By
modifying just one of them (say, doubling the value in the U scale) you can
stretch the texture. By doubling both of them, you quadruple the size of the
texture on the brush. Lastly, you can flip a texture without rotating it by
putting a negative value into either of these boxes. There are many cases where
mirroring a texture can be useful:&nbsp; aligning trims on a wall, building a
fake mirror image of a screen, and giving a clue to a secret door. The dialog
also has two <i>Flip </i>buttons that allow you to do the same thing. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Finally, there are two
check boxes. When you check the <b>Stick </b>checkbox, DEdit will attempt to
hold the textures aligned to the brush’s faces as they currently are. This
allows you to move the brush around without the texture sliding around on the
face. DEdit will try to automatically update the textures’ offsets and even
rotation to keep the faces. Although DEdit doesn’t always make the right
choices, for simple moves and simple rotations it can be faster than doing the
math yourself. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The <b>XZ Only </b>checkbox
is used to force textures to map on the brush from straight above it. It’s
generally only used for terrain, to make it easier to align textures. You can
experiment with it, but it generally causes undesirable results on anything but
terrain. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>There are also some texture
alignment hotkeys that allow you to do some of these operations without going
into the dialog. <b>K </b>rotates the texture on a face in Geometry mode,
attempting to align it accurately with the corners of the brush. It’s
frequently faster than going into the Map Texture Coordinates dialog for simple
problems like our sign problem above. The other useful shortcut (also used in
Geometry Mode) is the <b>R </b>key. When this key is held down, moving the
mouse will move the texture around on the face of the brush. It is difficult to
exactly align a texture using this shortcut, but it can be very helpful for
getting the texture roughly aligned. You can then use the Map Texture
Coordinates dialog to clean up the result, cleaning up the UV offsets to
exactly fit. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>You can also hold <b>R </b>and
click the right mouse button to rotate textures freehand. Holding <b>SHIFT+R </b>keys
changes from totally freehand rotation to rotating in 15-degree increments.
Holding <b>R </b>while clicking with the left mouse button allows you to scale
the texture freehand. </span></p>

<h2><a name="_Toc502717212"></a><a name="_Toc482706198"></a><a
name="_Toc500144906"></a><span style='mso-bookmark:_Toc502717212'><span
style='font-family:Arial'>Invalid Brush Types </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>Though we’ve already talked
a little about invalid brushes earlier in this chapter and other chapters, this
section goes into a little more detail on the how and why of bad brushes and a
few ways to repair them. Not all problem brushes cause terminal problems, and
some of them are even useful under very specific circumstances (such as 1-sided
polygons). However, until you learn how to use them, you should always be sure
to avoid creating invalid or problem brush types. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The first type is usually
created accidentally. Move to the Top viewport and press <b>CTRL+G </b>to
switch to Geometry mode. You’re now in the mode DEdit reserves for editing on
the level of faces, vertices, and edges, rather than brushes. What happens if
you create a brush in this mode? Try it:&nbsp; Use the <b>SPACE </b>bar to
create a square brush in the Top viewport. Notice that when you close the brush
by placing the last vertex, you are <i>not </i>prompted for a brush thickness
the way that you are when you build a brush in Brush mode. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Press <b>CTRL+B </b>to
switch back to Brush mode and look at the new brush you’ve created. Use the <b>I
</b>and <b>O </b>keys in the Left or Front viewport to bring it into view. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>What you’ll probably notice
is that the brush is completely flat. In fact, not only is it flat, it has only
one side. What that means is that from one side it’s solid and has a visible surface,
and from the other it’s completely transparent. The processor will alert you if
it finds one of these brushes in your level, and often you’ll notice yourself
that the wall you thought you’d just created isn’t as thick as you intended and
has very strange properties. </span></p>

<h3><a name="_Toc502717213"><span style='font-family:Arial'>Using Hullmaker
Brushes </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>These brushes can be used
in building your level as <b>hullmakers </b>, which are brushes with a very
specific and special purpose that is described later. However, in almost all
other circumstances they will cause problems and errors. If you create a brush
in Object or Geometry mode, or if you ever notice you haven’t been prompted for
a brush thickness, you should immediately switch to Brush mode using <b>CTRL+B </b>.
The one-sided brush will be selected. In these cases, you should delete the
one-sided brush and then create the brush as it should be in Brush mode. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The second invalid brush
type is the concave brush. Brushes in LithTech and most other current game
engines can only be convex. Brushes can most formally be described as the space
located inside the intersection of a series of planes. They are composed of <b>vertices
</b>, <b>lines </b>and <b>planes </b>. A <b>vertex </b>is a geometric point
that defines one end of the <b>line </b>that composes a brush’s edge. A <b>line
</b>is two connected points. An X, Y, and Z coordinate define each <b>vertex </b>.
Any three points on a <b>plane </b>can be used to define that plane. For
editing purposes, a plane is three or more lines connected to form a closed
polygon. Planes <i>must </i>always be flat. Brushes must always be convex, <i>never
</i>concave. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Since the engine sees
brushes as “All space inside the area defined by the intersection of their
planes,” a brush that’s concave can intersect with <i>itself </i>, which
effectively gives it multiple “insides.” Unlike a 3D modeling package, game
engines don’t handle this at all well. The game will pick one “inside” as the
right one, then throw out the rest of the brush. This almost always produces
unpleasant results. </span></p>

<h3><a name="_Toc502717214"><span style='font-family:Arial'>Working With
Concave Brushes and Loose Faces </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>The best way to deal with
concave brushes is to split them up into convex brushes. You should ideally do
this before even building them, by carefully thinking out your brush layout and
building the concave shape with convex brushes. However, if you’ve built a concave
brush you can sometimes split it up using splitting planes as discussed earlier
and get healthy convex brushes. Be sure to check the resulting brushes to make
sure that when you’re done you haven’t accidentally missed a concave section. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Brushes also sometimes
develop a loose face. If you try to move one face on a brush in Geometry mode
and the rest of the brush doesn’t follow it, the face has probably been
detached from the rest of the brush. This is rare, but it’s also easily fixed.
Undo the move so that the face goes back where it was, then use click-and-drag
selection technique to carefully select the vertices at one of the corners.
Press <b>CTRL+J </b>to join the tagged vertices. Keep doing this for each
corner until you’ve reattached each of the corners. Afterwards, use the <b>Remove
Extra Edges </b>option from the <b>World </b>menu <b>Special </b>commands,
followed by the <b>Update Plane </b><i>s </i>command on the same menu. Your
brush should be properly sealed again afterwards. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>This technique can also be
used to correct problems from a carve where one plane of the brush protrudes
too far, another rare problem. Just move any misplaced vertices to where they
should be attached and then join and clean them up as described above. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Another problem that can
occur is brushes whose vertices don’t all land on the grid. Sometimes, a vertex
that’s off of the grid slightly will be miscompiled due to rounding errors in
the floating-point math involved in processing the level for the engine. As a
result, you may see gaps between brushes where two faces don’t line up as they
should. Again, making sure that you don’t create brushes whose vertices leave
the grid is the best way to prevent such problems. Care when stretching,
carving or splitting brushes can prevent most of these problems, and you can
correct them after the fact using Geometry mode. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>These types of errors are
especially common when you import terrain using the old-style height map method
from LithTech 1.0. Most of the terrain sections will probably have vertices
that are off of the grid. Usually, it’s possible to correct some of these by
selecting all of the terrain brushes and setting their <b>NoSnap </b>property
to <b>True </b>. That tells the engine not to force their vertices onto the
grid. Some errors will often remain, but you can correct these by fixing the
vertices of just the problem brushes and their immediate neighbors by moving
these vertices onto the grid. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>One last type of error
occurs when two faces of different brushes occupy the same space. In such cases
(a handrail sticking through a wall, two walls whose corners overlap), if the
overlapping planes are both visible to players, the engine may not know which
to remove. In these cases, it will leave them both. This results in a weird
flickering display of both surfaces at once, which is pretty unpleasant. You’ll
recognize the effect when you see it. </span></p>

<table border=0 cellspacing=0 cellpadding=0 style='mso-cellspacing:0in;
 mso-padding-alt:0in 0in 0in 0in'>
 <tr>
  <td width=291 valign=top style='width:218.25pt;padding:0in 0in 0in 0in'>
  <p class=MsoNormal><!--[if gte vml 1]><v:shape id="_x0000_s1033" type="#_x0000_t75"
   alt="" style='position:absolute;margin-left:0;margin-top:0;width:164.25pt;
   height:56.25pt;z-index:8;mso-wrap-distance-left:0;mso-wrap-distance-top:0;
   mso-wrap-distance-right:0;mso-wrap-distance-bottom:0;
   mso-position-horizontal:left;mso-position-horizontal-relative:text;
   mso-position-vertical-relative:line' o:allowoverlap="f">
   <v:imagedata src="DEdit_Files/image047.gif"/>
   <w:wrap type="square"/>
  </v:shape><![endif]--><![if !vml]><img width=219 height=75
  src="DEdit_Files/image047.gif" align=left v:shapes="_x0000_s1033"><![endif]></p>
  </td>
  <td width=356 valign=top style='width:267.0pt;padding:0in 0in 0in 0in'>
  <p><span style='font-size:10.0pt;font-family:Arial'>The way to avoid this is
  to make sure that where surfaces meet, they don’t overlap on surfaces where
  the player can see. Don’t overlap two walls at the corner; just neatly join
  them. </span></p>
  </td>
 </tr>
</table>

<p><span style='font-size:10.0pt;font-family:Arial'>Don’t run a handrail all
the way through the wall; just end it where it touches the wall. <i>Figure B </i>presents
the proper way to connect two brushes at a corner. Surfaces that the player can
never see are always removed when a full Processor run is done. Luckily, that
means you only need to worry about this issue in cases where both surfaces are
visible to the player. </span></p>

<h2><a name="_Toc502717215"></a><a name="_Toc482706199"></a><a
name="_Toc500144907"></a><span style='mso-bookmark:_Toc502717215'><span
style='font-family:Arial'>Using the Nodes View to Organize </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>As your levels grow larger
and more complex, it becomes increasingly important to have ways of grouping
areas of your map into subsections for easier selection and management. The <b>Nodes
</b>tab is designed to help you do this, as well as to manage doors, windows,
and other objects that are composed of a brush <b>bound </b>to an entity,
rather than an entity or brush on its own. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Note:&nbsp; </span></b><span
style='font-size:10.0pt;font-family:Arial'>Binding brushes to entities is
discussed in more detail in the section on adding entities to your map. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>&nbsp;Your level may also
have groups of entities like AI paths or scripting paths that would benefit
from being in groups so that you can easily find them. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The <b>Nodes </b>tab is a
tool for organizing your level, for viewing its structure and for quickly
locating objects in it. As mentioned previously in our section about selection,
the nodes view reflects objects you select in the other views and vice versa.
If you select a brush or object in one of the viewports, it becomes selected in
the Nodes view. If you select a node, it will be highlighted in the viewports
as well. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Go to the <b>Nodes </b>tab
and look around at your level. What you’ll see is that the tab lays out your
level not as it’s visually organized, but as a tree, showing the connections
and relationships between objects in the level. At the very top of the tree is
the <b>root node </b>. This object has no properties, and selecting it selects
all of the <b>child nodes </b>below it, but doesn’t actually select the root.
Selecting a node that contains other nodes always selects the contained nodes,
but usually it also selects the <b>parent node </b>as well. In this case, the <b>root
node </b>is special. You can’t delete, change, move or rename the <b>root node </b>,
so there is no reason to select it other than as a quick way to select all
objects in the level. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>You’ll also see that there
are multiple levels in the tree of nodes. Some nodes are hanging off of nodes
other than the <b>root node </b>. Most of the objects that contain other nodes
probably have the name <b>Container </b>. Container objects are special. When
an object is contained as a child node below another object, it inherits the
parent’s properties. This is called <b>binding </b>and will be talked about in
the section on entities. The reason that containers don’t affect the objects
that they hold is because Containers don’t have any properties. They only exist
to hold and organize the other objects in your level. </span></p>

<h3><a name="_Toc502717216"><span style='font-family:Arial'>Naming and Renaming
Objects </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>You’ll probably also notice
that most of the nodes have somewhat cryptic names like <b>Container </b>or <b>Brush1
</b>. That’s easily fixed, though. By default, DEdit creates object names based
on the class of the object. When a new brush is added to DEdit, its name is
automatically set to <i>Brush# </i>, where <i># </i>is a unique number. DEdit
tries to give each object a unique (albeit boring) name to make each one easier
to find. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>If you don’t like the names
DEdit gives to objects or want to change them for other reasons, you can change
the name of a node just like you’d change it in Windows Explorer. Click on one
of the node names, then press <b>F2 </b>or single-click once again on the
node’s name. You’ll see the name become highlighted, just like a file or folder
in Windows, and you can now type a new name. When you press <b>ENTER </b>the
new name is applied. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Since the regular viewports
are linked to the Nodes view, you can also rename objects in their Properties
dialog, which is useful when you want a group of objects to have the same name.
Using the Perspective view, select all of the brushes you used to seal your
level, the six brushes that make up the level’s outside walls. Select the <b>Properties
</b>tab and look at the Name field. Though you only see a single entry there,
if you change the Name field here, the names of all selected objects will
change. Type in “Outer Wall” in the Name field and then switch to the Nodes
tab. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>You should see six nodes,
all of which have the same name:&nbsp; “Outer Wall.” You can also see how the <b>Nodes
</b>tab indicates that an object is selected. The little box next to the
object’s name is checked. If you look at the other objects that are visible but
not selected, you’ll see that their checkboxes are empty. If you click on a
checkbox, it becomes checked, indicating that you’ve just selected the object.
Likewise, you can unselect an object by clearing its checkbox. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>You’ll also probably notice
that our six outer wall brushes are inside a Container node. Since you didn’t
know where the brushes were in the Nodes view until you selected them in the
Viewport, you couldn’t take advantage of that container to quickly select the
brushes. However, now that you do know where it is, click on the Container node
and rename it to “Outer Walls” to make it easier to find. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The reason that these
brushes are inside a container is because you used the <b>Hollow </b>command to
create them. Certain operations like hollowing, carving and splitting that take
a single brush and turn it into multiple brushes automatically create a
container and put the resulting brushes into it to keep them organized. </span></p>

<h3><a name="_Toc502717217"><span style='font-family:Arial'>Using Containers to
Organize a Level </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>Using containers to
organize your level is a very good idea. Imagine a level with 200 brushes, 50
lights and 75 enemies and you can imagine why. Using containers to group
brushes by room, lights by area and enemies by squad turns your level from a
massive jumble into a logical order. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Note: </span></b><span
style='font-size:10.0pt;font-family:Arial'>Now that you know about container
nodes and renaming things, you may be tempted to carefully name each brush and
object, or to build six layers of containers for all of your items. Don’t spend
more time than necessary on organizing things. It’s wise to sort out your level
in a general way to make things easy to find and to help others who may need to
work on your level. However, it’s easy to go overboard as well. Spending hours
laying out your level in the Nodes tab is as much of a waste as the hours you
may spend searching through an unorganized level to find a brush or entity. Be
careful to find a balance. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>You add a container of your
own from the <b>Context Menu </b>in the nodes view. Right-click on the Root
node. The top item on the context menu is <b>Add Container Node </b>. Select it
and you should see a new container node appear in the tree. You can have as
many container nodes as you want in your level. Since containers are removed
from the level when it’s processed, they have no effect on the actual operation
of the level in the game. They’re present exclusively to help you structure
your level within the editor. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The context menu has many
useful commands on it, all of which are covered in the DEdit references in this
guide. However, there are several that deserve to be highlighted. The first of
these is the <b>Set Active Parent </b>command, the second one on the menu. The
active parent node is the node where new and pasted objects are added. By
default when the level is opened, the active parent node is always the root
node. Thus, each brush, entity and container you add is added directly below
the root node. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>This command allows you to
make another container node into the active parent. Thus, if you’re creating a
new room you can create a new container node and designate it as the active
parent to have all new brushes and entities appear below that node. This helps
a great deal when you’re trying to make a level neatly without wasting a great
deal of time. Instead of organizing beforehand, you can organize as you go. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The various hide commands hide
the targeted nodes in the Viewports, but you can still see them in the node
view. They’re most useful for getting brushes out of the way if you want to do
tough geometry work or if you’re having trouble seeing how parts fit together. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Move Tagged Nodes Here </span></b><span
style='font-size:10.0pt;font-family:Arial'>moves all the objects that are
currently selected under whichever node you right-clicked on. This is useful
for organizing things into containers quickly, since otherwise you must drag
brushes under a container node individually. You can also use the <b>Group
Selection </b>command to group objects under a node, but that creates a new
container for the selected brush, which isn’t always what you want. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Go To Next Tagged Node </span></b><span
style='font-size:10.0pt;font-family:Arial'>is a command you can use to easily jump
between selected objects in the node list. Each time you select this item from
the context menu or press <b>F4 </b>(the hotkey for this action), the Nodes
view will scroll and highlight the next selected node. If you’ve used the <i>Selection\Advanced
</i>menu to do an advanced selection in the level and therefore don’t know
exactly what is selected, this is a quick way to jump to the objects you want.
It’s also useful in cases where you can find something in the viewports but not
in the nodes view. Last, if you’re just not certain what’s currently selected
(or if anything actually is), you can use this command to quickly find out. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>One last useful tool that
the Nodes tab offers is the set of radio buttons at the top of the node list,
right below the tab name. You can use these commands to toggle between viewing
the names of the level’s objects and their class. This is often helpful when
you need to identify nodes or find objects. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>As mentioned before, the
Nodes tab also shows the relationship between the objects in the level, which
can be very important in the case of entities. </span></p>

<h2><a name="_Toc502717218"></a><a name="_Toc482706200"></a><a
name="_Toc500144908"></a><span style='mso-bookmark:_Toc502717218'><span
style='font-family:Arial'>Enter the Entities </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>Of course, there’s more to
a map than just the brushes it contains. A map with just brushes is like a
movie with no actors:&nbsp; It’s a still life. In order to have weapons, enemies,
and even lights, you must add objects to the map that tell the game engine
where to place these things. A map can’t even be started if you don’t designate
a player start point in the map. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>This section deals with
adding objects like the above, as well as other types of props, to your maps.
Most of the objects mentioned above are referred to as <b>entities </b>. An
entity can be defined as an object that is defined not of brushes but by code
(either in the game or the engine). The LithTech engine has certain <b>classes </b>of
object that any game built on LithTech can use. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Most games also define
their own sets of entities, some of which are brand new, and some of which are <b>subclasses
</b>or children of the engine classes. A subclass incorporates most or all of
the behaviors and attributes of the parent, but also adds some new behaviors of
its own. In the case of most LithTech games, for example, you can add a Door
(“Make this brush move.”), you can add a Door-subclass RotatingDoor (“Make this
brush move and turn on a point.”), or you can add a RotatingDoor-subclass
DestructibleRotatingDoor (“Make this brush move, turn and explode when shot.”).
Each of these subclasses takes the properties and behaviors of the object above
them in the tree (their parent) and extends them in new directions. You can
still use the root classes in cases where you don’t need the added properties
of the child objects, and often will. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>This tree system is easy to
see when you look at the <b>Add Object </b>dialog inside a LithTech game. For
example, each of the AI classes derives from the root class, but each type of
enemy, civilian and major character is its own subclass, many of which have
their own subclasses for different armies or different versions of the
character. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Our example will be using
the SDK’s sample project, which has a much simpler and smaller object list.
Begin by moving the green marker so that it’s centered in the archway you built
earlier and about 64 units above the floor. Next, right-click in a viewport and
select <b>Add Object </b>from the context menu. </span></p>

<h3><a name="_Toc502717219"><span style='font-family:Arial'>Setting the
GameStartPoint </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This dialog is where you
select and add objects to your level. Look down the list until you see the one
labeled <b>GameStartPoint </b>. This is the first object you should add to your
level, since without a start point your game doesn’t know where to <i>start </i>the
player off in the level. The reason for raising the start point 64 units off of
the floor is to ensure that the player has room to stand when he or she
appears. If there’s not enough room for the player to appear, the start point
is too low to the floor, or if the start point is inside a solid object, the
player will just fall out of the bottom of the world. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Select the <b>GameStartPoint
</b>object from the list and click <b>OK </b>. Now, if you look closely at the
center of the green marker, there’s a small square located there. If an entity
doesn’t have a discrete volume that’s specified by the player, this square is
how it will be represented in DEdit. Many objects such as models have a volume
associated with them and are therefore represented by a box that’s the right
size for them. </span></p>

<h2><a name="_Toc502717220"></a><a name="_Toc500144909"></a><span
style='mso-bookmark:_Toc502717220'><span style='font-family:Arial'>Lighting the
Map </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>Another way that some
objects are represented is a combination:&nbsp; A point that shows the origin
of the object and a circle, square or cone representing their area of effect.
One object that uses such an indicator is the light. Move the green marker up
64 units above the start location and go back to the <b>Add Object </b>dialog.
From the list of objects, select <b>Light </b>and OK the dialog. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>What you should now see is
a new box above the old one that is surrounded by a large sphere. The sphere is
the radius within the level that the light will fill. Go to the <b>Properties </b>tab
in the project window and look at the properties of the light. In most cases
and entity’s properties are the most important tool used to control its
behavior. In the case of lights, this is where you can change their size,
brightness and color. The light’s current size (set in the LightRadius
property) is 300. That’s probably a little small, so change the value to 500
and press the <b>enter </b>key. In the viewports you’ll see the size of the
light radius increase as well. Now it’s large enough to make a good-sized pool
of light around the player. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Terrain can be lit by
ordinary lights just as any brushes can. (For more information about terrain
lighting, see the <i>Lighting LithTech Worlds </i>topic on page 25.) There is
also an additional lighting resource that is very useful with terrains. You can
also use a <b>StaticSunLight </b>object to light the entire map with a single
source. StaticSunLight objects require a working skybox in order to light the
map. Most of their properties are self-explanatory and similar to a DirLight,
but without <b>FOV </b>(Field Of View). The light projects in from the level’s
sky portals. The main different property is <b>Bias </b>, which controls the
softness of the light when it falls on terrain. Varying the light’s <b>Bias </b>varies
the level shadows from sharp and harsh-edged to soft and rounded. To have a
StaticSunLight affect your terrain, set the terrain brushes’ <b>DirectionalLight
</b>property to TRUE; their other lighting properties should be set to FALSE,
since <b>GouraudShade </b>and <b>Lightmap </b>will override the directional
lighting. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>StaticSunLights will
illuminate normal brushes just as they will Terrain brushes, so a single
StaticSunLight can provide all of the main lighting for an entire level if it’s
largely open. It is still recommended to place individual point sources around
your level for highlighting and fine control. </span></p>

<h3><a name="_Toc502717221"><span style='font-family:Arial'>Working With Light
Colors </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>The next property you may want
to modify is the light’s color. LithTech is a little unusual in that its lights
have both interior (LightColor) and exterior (OuterColor) color properties. By
default, the interior color of the light is set to white and the exterior color
is set to black. That means that the light starts out as a pure white, then
fades out to black at the edge. This becomes useful in areas that have a
non-black ambient light, such as a cavern of lava lakes, or an outdoor scene on
the savannah in bright daylight. If you wanted to fade a light out more
gradually in one of these settings, you could set the exterior color to a mix
of black and the ambient light’s color for a slower fall-off. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>To change the colors, click
on the color sample button next to the property name. Start by clicking the
white button (LightColor). The dialog that comes up is a standard color picker
dialog, and it allows you to pick from a standard palette or create your own
custom colors. Choose one of the very light blue colors for something similar to
a fluorescent light. You can use the slider on the far right to lighten or
darken the color to your taste. When you’re done, close the dialog and you’ll
see your new color in place on the LightColor button. The OuterColor property
is changed in exactly the same way. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Lastly, you can set the
brightness of the light using the BrightScale property. At its default setting
of 1.0, the light appears at a normal brightness. If you change the value of
BrightScale to 0.5, the light’s brightness is halved. However, the <i>radius </i>stays
the same. Thus, you can create a very large light that doesn’t overwhelm the
area closest to its center. Likewise, if you want an intensely bright light,
you can increase the BrightScale value to 2.0, which will make the light much
brighter. For now, leave BrightScale as it is. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>There is another useful
type of light with very different behavior from the regular one:&nbsp; The
DirLight. While a normal light throws light in a sphere all the way around it,
a DirLight acts like a spotlight:&nbsp; It throws light in a cone, the diameter
of which you can control. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Switch to the Top viewport
and move the marker 256 units (4 lines on a 64-unit grid) down, towards the
edge of the platform furthest from your archway. Then move the marker 64 units
closer to the floor, so that your DirLight will show up better on the floor.
Then, right-click in one of the viewports and select <b>Add Object </b>again.
Find the <b>Dirlight </b>class and add one. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>What you should see is a
pyramid-like cone extending from the marker towards the top edge of your
platform. The cone represents the area where the light will fall within the
game. If you look at the Properties tab, you’ll see that the Dirlight has most
of the same properties as your regular light from before, but it has an
additional property, FOV, which stands for Field of View. It represents the arc
within which the Dirlight actually sheds its light. You can increase this value
to widen the pattern or decrease it to reduce the pattern’s width. Change the
FOV to 60. You should see the base of the light’s preview cone shrink down in
size. </span></p>

<h3><a name="_Toc502717222"><span style='font-family:Arial'>Aiming the Dirlight
</span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>You can aim a Dirlight
using the object’s Rotation property. Click the button next to the property’s
name and you’ll see a dialog appear. Within this dialog, you can control every
aspect of the object’s facing. Each of the three aspects has a range between 0
and 359. Yaw controls the horizontal facing of the object, and is aligned
identically to the Top viewport like a compass needle. You can use the preview
display at the top of the dialog to see how the results will appear. A setting
of 0 points the object straight “north,” towards the top edge of the Top
viewport. A setting of 90 would aim “east,” a setting of 135 would point
“southeast” towards the lower right corner of the viewport and so on. For now,
set the yaw to 180 to spin the Dirlight around so it’s facing the opposite
direction. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Pitch controls the vertical
angle of the object. The Pitch preview display shows the result of your
changes. Since the Dirlight is pointed at the proper angle already, there’s no
need to change this. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The Roll control controls
the spin of the object. This is useful mainly for props or cameras, where you
want the object to bank or its viewpoint to sway. You would change a motorcycle’s
Roll, for example, if you wanted it to lean as it turned a sharp corner. Again,
there’s no need to change this value in the case of a Dirlight. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>You should also increase
the LightRadius of the light to 600 to extend the reach of the light a little
further. </span></p>

<h3><a name="_Toc502717223"><span style='font-family:Arial'>Outdoor Lighting </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>In addition to the
DirLightclass, there is an additional light class that is useful for creating
outdoor scenes—the <b>StaticSunLight </b>class. StaticSunLight objects require
a working skybox in order to light the map. StaticSunLight objects light the
level through the level's sky portals. Most of their properties are
self-explanatory and similar to DirLight objects, but StaticSunLight objects do
not have <b>Field of View </b>(FOV). In addition, StaticSunLights have a <b>Bias
</b>property, which controls the softness of the light. Varying the bias values
changes the cast shadows from sharp and harsh-edged to soft and rounded. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>In order for StaticSunLight
to affect your terrain, you must set the terrain brushes' <b>DirectionalLight </b>property
to TRUE. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>StaticSunLights illuminate
both normal brushes and terrain brushes, so you can use a single StaticSunLight
for all of the main lighting for an entire level if it's largely open. It is
still recommended to place individual point and directional sources around your
level for highlighting and fine control. </span></p>

<h2><a name="_Toc500144910"></a><a name="_Toc502717224"></a><a name=lightmap></a><span
style='font-family:Arial'>Lighting LithTech Worlds </span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>LithTech uses a combination
of lightmaps and vertex lighting to light worlds. Lightmaps are textures
generated by the processor at world compile time. Lightmaps contain ray-traced
lighting information for an individual polygon. Lightmapping is used for all
world geometry, along with world models, except for terrain. Terrain is lit by
vertex colors, generated at compile time, and gouraud interpolated across the
polygons. Models are dynamically lit with normal lighting, attenuated with the
equations below. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Below is the list of
equations used by LithTech to calculate light attenuation. Light attenuation is
the value multiplied by the light color to obtain the final lighting value for
a vertex or lightmap texel. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Key: </span></b><span
style='font-size:10.0pt;font-family:Arial'>Att = Attenuation, d = distance from
light, Lr = Light Radius. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Lighting Equations: </span></b></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Lightmap &amp; Terrain
lighting (Default): </span></b><span style='font-size:10.0pt;font-family:Arial'>Att
= 1 – (d / Lr) </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Custom Model lighting: </span></b><span
style='font-size:10.0pt;font-family:Arial'>Att = 1 – (d <sup>2 </sup>/ Lr <sup>2
</sup>) </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The Direct3D &amp; PS2
model lighting use the function: </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Att = 1 / (A + B d + C d <sup>2 </sup>) </span></b></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Processor gives the option
to use this same lighting model for lightmaps &amp; terrain (marked <b>Inv Quad
Falloff </b>in the Processor dialog). This lighting model generally yields more
realistic looking lighting. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>A, B, &amp; C are
constants: A = 1, B = 0, C = 20 / Lr <sup>2 </sup></span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>We recommend that if you
are using the D3D or PS2 T&amp;L lighting models for your models that you also
use the <b>Inv Quad Falloff </b>for your world lighting (as your lighting
values will more closely match the world lighting values). Note that if you
have build your levels with the older lighting models, your level will probably
appear darker and you will probably need to increase the radius of many of your
lights to compensate. </span></p>

<h3><a name="_Toc502717225"><span style='font-family:Arial'>Binding Entities to
Brushes </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>The last way of creating an
entity is by <b>binding </b>it with a brush or group of brushes. In order to
bind brushes, you first select the brush or brushes you want to bind, then
right-click and select <b>Bind to Object </b>from the context menu. The
entities list appears and you can then select the entity you want to bind to.
By binding brushes to an entity, you tell the entity to use the brushes to
define its structure or its volume. Two general classes of bound objects
commonly appear in LithTech:&nbsp; <b>WorldModels </b>and <b>Volume Brushes </b>.
</span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>WorldModels change the
geometry that they’re bound with into an object that can be moved, destroyed
and manipulated. Usually, brushes can never move or be changed in any way.
WorldModels are the basis of things like doors, exploding walls and elevators.
Some props may also be constructed out of WorldModels as well. In the later
section about different types of models, you can learn more on how to use
WorldModels. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Volume brushes convert the
brushes they’re bound to into spaces that affect players standing inside them.
They’re the basis for things such as water, zero gravity rooms, poison gas and
teleporters. In order to fill a pool with water, you would make an empty pool.
Then you would create a brush that takes up the space of the water in the pool.
Last, you would bind the brush to a volume entity with water properties. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>There are many different
types of entities and they tend to vary dramatically from game to game. It’s a
very good idea to ask your game’s coders to carefully document their work and
to write explanations on the use of their custom entities, since they are the
ones with the greatest understanding of the specific entities used in your
game. DEdit itself can provide help on properties on the fly using a file
called Classhlp.BUT. </span></p>

<h1><span style='font-family:Arial'>Adding Sky to Your AVP2 Level</span></h1>

<p><span style='font-size:10.0pt;font-family:Arial'>You can view a separate
tutorial that describes how to add a prefab, simple, or complex sky to your
AVP2 level. Click <a href="skybox.htm">here</a>.</span></p>

<h2><a name="_Toc502717226"></a><a name="_Toc482706201"></a><a
name="_Toc500144911"></a><span style='mso-bookmark:_Toc502717226'><span
style='font-family:Arial'>Types Of Geometry </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>The term “geometry” in LithTech
actually describes several very different classes of object:&nbsp; Models,
WorldModels and World Geometry. It’s useful to know and remember the difference
between these three classes of geometry, since they are made very differently
and can be used in very different ways. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Models are, as the name
implies, objects built in 3D Studio or another external modeling package. Their
mesh is stored in an .ed file that is exported from that package and loaded by
LithTech. Models are usually used for objects in the world that have a high
polygon count, require complex animation or would be very difficult to make
inside DEdit. Players, weapons and props like dishes and chairs usually are
made with a model. Doors, walls and other large, structural features are
usually not. Models can’t block visibility the way world geometry can, and they
generally don’t integrate with the brushes in the world. Instead, they sit on
top of brushes. This makes them very suitable for props like chairs and desks,
since you can quickly place a large number of them with less work. It makes
them unsuitable, however, for making a whole building or parts of terrain. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>WorldModels are a
hybrid:&nbsp; they consist of an object with a brush or brushes bound to it, which
provide its mesh. The brushes are built and textured inside of DEdit, which
allows better integration with the rest of the level. Unlike regular brushes,
though, WorldModels can be translucent, can move and can be destroyed and
removed from the level. WorldModels are often used for parts of a level like
large mechanical props, vehicles, doors, glass and fences. They usually don’t
block visibility but can be made to do so with customized game code to an
extent. They’re not useful for character models, since they’re not easily
deformable. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>World Geometry is made of
brushes. These brushes are (with the exception of terrain) are always built and
textured in DEdit. World Geometry makes up the vast bulk of almost all worlds
in a DEdit game. Its main ability is that it can block visibility. It’s used
for walls, ceilings, columns, ground, sky and many other solid, immovable
objects in a world. However, due to World Geometry’s limitations (can’t move;
can’t be translucent, must be convex), world geometry must be bound up in a
WorldModel to make things like doors and .ed models are much more appropriate
for complex objects like statues or chandeliers. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>There is overlap between
the various classes. You can build a vehicle as either a Model or a WorldModel,
depending on how flexibly you need it to move. You could even build a vehicle
out of World Geometry if it was never going to move. Likewise, trees can be
made as any of the three depending on what’s most convenient. For complexity,
the Model is preferable. For interactive, solid world objects, the WorldModel
is usually best. For solidity and visibility control, World Geometry is best. </span></p>

<h2><a name="_Toc502717227"></a><a name="_Toc482706202"></a><a
name="_Toc500144912"></a><span style='mso-bookmark:_Toc502717227'><span
style='font-family:Arial'>Advanced Processor Use </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>The Processor ( <b>Processor.EXE
</b>) is a separate executable from DEdit itself that is used to pre-process
your level. Pre-processing a level is a great deal like compiling code. You
take the human-readable version you constructed and turn it into a
machine-friendly and heavily optimized version for the computer to use. The
computer doesn’t have much use for your version, and you can’t do very much
with the computer’s version. You <i>must </i>process your level in order to run
it in the game. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>In LithTech, the human
version of your level is stored in an .ed file that is readable by DEdit. It
contains all of the brushes in the level as you laid them out, references to
all the textures needed by the level, a list of all its entities and any other
information about things you’ve added to the level. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The computer version of an
.ed file is a .DAT file. .DAT files have the same name as the .ed file they
were compiled from aside from the extension. Thus, if you built a level called
“Level01.ed” and compiled it, you would get “Level01.DAT” as a result. Unlike
the .ed file, the .DAT file doesn’t contain all your brushes as you laid them
out. It also <i>does </i>contain some things that your .ed file does not. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The first difference in a
.DAT file is that the brushes in it have been broken down, digested and
reassembled so as to optimize them in number and in layout for actual gameplay.
Any polygons on the outside of the level or in areas that the player will never
be able to see are stripped entirely away. The remaining brushes are all split
up at each point where one brush touches another until nothing remains but
convex shapes. You can read more about this process in the section below on
optimization, as well as how to see the splits that result. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Another difference in a
.DAT file is that things are now arranged as a series of <b>hulls </b>, which are
LithTech’s way of sorting out the areas within the level to determine
visibility, as well as the connections between them. Between these two factors,
a map inside a .DAT file and the same map in an .ed file would be vastly
different if you could open and compare them. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Another addition in the
.DAT file is lighting data. Although you get a preview of each light’s effects
in DEdit, the actual intersections and combinations of each light don’t get
calculated until the level is processed. All of that data is then added into
the .DAT file, mainly in the form of a second layer of textures for all brushes
that are lightmapped. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Last, there’s the addition
of visibility data. The Processor builds a list all points in the level that
specifies which areas can possibly see into which other areas. This is an
important step because it vastly speeds up all but the smallest levels by
cutting out of view any brushes that the player doesn’t need to see. As an
example, if the player is standing in a small room on one side of a hallway and
a doorway on the other side of the hallway leads into a large room full of
boxes, the Processor might determine that there’s no way for the player to see
into the large room without moving a substantial distance. It will therefore
remove the large room from the visibility list for the small room. The engine
will therefore not render the large room if the player’s in the small one,
freeing up cycles when the level is running. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>If this sounds like a
time-consuming process, that is because it is one. Compiling a large level
completely with all optimizations turned on can take hours. Quick compiles can
sometimes take as long as 30 minutes, although generally the time is much less.
However, Processor gives you fine control over all of the steps in the compile,
and by changing what gets processed and how thoroughly you can choose between a
highly optimized level that’s ready to ship and a quickly-processed level when
you want to quickly check your results. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>There are a few settings
you will want to know about for all compiles. When you start the Processor by
selecting <b>Process </b>from the <b>World </b>menu in DEdit, this dialog
appears. </span></p>

<p><span style='font-size:10.0pt;font-family:"Formata Light"'><img border=0
width=512 height=386 id="_x0000_i1042" src="DEdit_Files/image049.jpg"></span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>DEdit remembers your settings
from session to session, but you must set them the first time you run and may
need to change them if you’re working on more than one project. Our first
important parameter is <b>Project Directory </b>, which informs Processor where
the files for your game are located. You should set this to the full Windows
path to the folder where your game’s .DEP file lives. This enables Processor to
get any necessary information out of textures in the game. Since some textures
have lights or other special effects, it’s important to make sure you have the
right value here. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>When a brush edge meets
another polygon’s edge not at a vertex, this forms a situation known as a T
Junction (the name comes largely from the fact that it does indeed look like a
T when the edges are perpendicular to each other). This can result in
pixel-sized gaps in the final image, most commonly known as <i>sparkleys </i>.
You can use the <b>Fix T Junctions </b>function to insert a new vertex into
brushes that have T Junctions on their edges so that the these gaps can be
avoided. Ideally it is best if the level artists handle resolving T Junctions
since using this feature can occasionally result in sliver-like polygons. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The second is the <b>Log
file </b>check box. Checking the box tells Processor to store a journal of its
activities on the hard drive. It will also display this information while it
runs, but this is still sometimes useful. For instance, if a level causes
Processor to crash, you can use the log to figure out what part of the compile
the crash happened in. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Last is the <b>Extra
Parameters </b>field. You can use this field to specify any command line option
that Processor supports. It’s highly advisable that you look over the list. </span></p>

<h3><a name="_Toc502717228"><span style='font-family:Arial'>Types of Compile
and Their Advantages </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>The first type of compile
is the quick compile. If your level is under heavy construction, hasn’t been
sealed and you only want to look at a few changes you made to lighting or
brushes, this is the type of compile to do. In this case, you only care that
geometry is built and the level is lit so that you can look around. You must
set <b>Import Geometry </b>and should probably set <b>Ignore Hidden </b>, <b>Import
Texture Flags </b>and <b>Apply Lighting</b>. If your level makes heavy use of
lights and the lighting stage takes a long time, set <b>Vertex Lighting Only </b>for
a speed-up. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The second compile is a
more thorough (although not full) compile. This is used when you want to check
the quality of lighting and your geometry placement, as well as to get a rough
idea of polygon counts. Set all of the flags listed above except for the two for
lighting speed-up, and also the <b>Light Animations </b>button, which tells
Processor to build the lightmaps for any animated lights you’ve added. Last,
set the <b>Full Optimization </b>flag and the <b>Fast Approximation </b>flag.
These tell Processor to generate visibility data, but to build it quickly
instead of accurately (which would take longer). </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Next is the full compile.
Check all the options from the thorough compile above except for <b>Fast
Approximation </b>. For a really thorough compile, you can vary the settings of
the <b>Less Polies/Balanced Tree </b>slider (higher is more optimized) in the
Advanced section. Generally, the slider should be near the top, but perhaps one
notch down. Having the slider all the way up can cause the compile to take
longer and sometimes causes errors. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>This compile is much
slower, but since the Processor works its hardest to make the level fully
optimized, the level will run much more smoothly within the game after a full
compile. This is the <i>only </i>compile you should ever run on a level that’s
about to be released. All other compiles sacrifice in-game performance for
reduced compile times. No user will care if the level took six hours for you to
compile or six minutes as long as their frame rates are high. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The last compile type
(entities only) is used when the only changes you’ve made in a level involved
entities and not brushes. For example, if you tweak the values of your lights
and then recompile, you haven’t changed any brushes. In these cases, the <b>Import
Geometry </b>checkbox will not be grayed out, allowing you to uncheck it. When
you run Processor, instead of building your geometry data from scratch and
throwing out your visibility data, Processor will retain them and just write
out the new entity settings. This leads to a much faster compile, especially on
large levels. However, this type of compile can occasionally lead to problems
in the output .DAT file and shouldn’t be used on a level that’s about to be
released to the public. As always, use only a full compile on such levels. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Once you actually run
Processor, the dialog will change to a log window and a display of progress
bars showing compile progress. If you read the log window you can learn a lot
about how the level is being handled. Some indicators you should watch for: </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Number of Unseen Polies Removed:&nbsp;
0 </span></b><span style='font-size:10.0pt;font-family:Arial'>— Watch for a
message stating the number of removed polygons. If there’s a low number in
relation to the total number of polies (especially zero), your level may have a
leak. See the optimization section for more on leaks. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>** Couldn’t find any
textures. (Is project path set?) </span></b><span style='font-size:10.0pt;
font-family:Arial'>— This message usually indicates that you haven’t set your
project path correctly. Usually not a problem, but if your game uses texture
effects it can cause issues. Check the project path setting. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Found 1 problem brushes </span></b><span
style='font-size:10.0pt;font-family:Arial'>— This warning indicates that
Processor found a brush it doesn’t think is valid. You can use the <b>SelectProblemBrushes
</b>parameter to track these down, and should do so as soon as they appear. </span></p>

<h2><a name="_Toc502717229"></a><a name="_Toc482706203"></a><a
name="_Toc500144913"></a><span style='mso-bookmark:_Toc502717229'><span
style='font-family:Arial'>Optimizing Your Level </span></span></h2>

<p><span style='font-size:10.0pt;font-family:Arial'>It’s actually fairly easy
to make a gorgeous Notre Dame-scale cathedral in DEdit. Once you know the basic
controls, you can pretty quickly lay out the brushes, apply the textures and
add in the lighting necessary to make such a structure. However, it is also <i>extremely
</i>easy to build a level that: </span></p>

<ul type=square>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo3;tab-stops:list .5in'><span style='font-size:10.0pt;
     font-family:Arial'>Will not compile </span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo3;tab-stops:list .5in'><span style='font-size:10.0pt;
     font-family:Arial'>Will take far too long to compile </span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo3;tab-stops:list .5in'><span style='font-size:10.0pt;
     font-family:Arial'>Will run poorly in the game even after a full
     optimization </span></li>
</ul>

<p><span style='font-size:10.0pt;font-family:Arial'>This is truly where the
science of level design begins to take a back seat to the art. Though there are
some basic rules and a lot of guidelines to optimizing levels, the best way to
learn good optimization techniques is to experiment and to carefully observe
the results you get inside your levels. You must think about optimization right
from the moment when you first begin designing your level, and you must watch
the performance of your level every step of the way as you build. Unlike any
other computer art product, computer games are rendered in <i>real time </i>,
and this restricts you substantially in what you can get away with in your levels.
</span></p>

<h3><a name="_Toc502717230"><span style='font-family:Arial'>Factors That Cause
Levels to Bog Down </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>Levels can become bogged
down for a number of reasons. The first of these is high polygon counts in a
scene. Even a simple empty room that has only walls, floor and ceiling can be
made up of several hundred polygons. In order to apply lighting and tune the
level’s performance, the brushes that you specify inside DEdit are broken down,
juggled around and reshaped by the Processor as it builds the in-game .DAT file
out of your .ed file. As mentioned above, this process is one of the reasons
why you can’t edit a .DAT file in DEdit. To measure the polygon counts in your
game, you use the <b>ShowPolyCounts </b>console command. As a general
guideline, the game designers for <b>AVP2 </b>kept multiplayer levels to around
700 polygons/scene in general on multiplayer levels and 800 or so for
single-player levels where frame rate was not as vital. It’s important to
perform some tests of your own on your target platform to develop your own
standards. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Lighting a level via
lightmapping requires that large brushes be broken down into smaller chunks.
This usually happens along texture boundaries. Thus, if you have a large room
with a 64x64 floor texture, the floor may be broken up into dozens of 64x64
chunks when in the editor it is shown as a single brush. The reason this is
done is to create the lightmap textures, which give the floor lighting. In the
case of a moderately large room, this may add 200 polygons to the scene, but in
some very large rooms it can add 400 or more polygons. It’s important to take
that overhead into account. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>There are ways to reduce
this press somewhat. The first is to try to break up large spaces so that only
some of the space is visible at a time. The second, useful in outdoor areas
without great ground detail, is to scale up the texture on the floor. Often, a
64x64 dirt texture looks acceptable if scaled up to 128x128. In some cases it
even helps give a sense of scale to the outdoor room. It’s important to test
this technique yourself and decide whether or not you like the result. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>There are also brush
properties that you can use to affect the method used to light your brushes.
The <b>LMGridSize </b>parameter listed in the WorldInfo string section
describes how you can scale up your lightmaps in order to reduce the number of
polygons created for lightmapping, which can lead to a decent savings in poly
counts for large rooms. In many outdoor cases (one of the most common places
where problematically large rooms appear), using Gouraud or flat shading can
prevent subdivision while still giving a good light effect. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The second cause of high
counts is complexity. It’s very hard to resist the urge to put every detail
into your geometry instead of using textures to create detail. However, it is
much more expensive to add detail using geometry than it is to imply detail
through tricks of the eye, lighting and texturing. Avoid nonfunctional detail
that can be added through textures like molding/trim, curlicues, grooves and
bumpy surfaces. A level designer’s art is figuring out how to imply detail. Ask
your texture artists to build a grooved surface or the face of a curlicued
building ledge, and then apply that texture to a simple flat surface. Use as
few sides as you can get away with on your columns and carefully consider how
to build each shape with the fewest polygons. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Another typical cause of
high counts is intersecting brushes. Every place where one brush touches
another, the processor splits the touched brush in order to remove the hidden
sections of each brush. However, this can drive counts up very significantly. A
large, square room that’s normally lit would be subdivided into a simple grid
of square brushes. If you place a square column in the middle of the room, the
room’s still split along a square grid, since the splits around the base of the
square column run parallel to the grid of splits made for lighting. However, if
you put down a 12-sided column in the middle of the room, split lines run out
from each of the 12 vertices that make up the base of the column. These lines
disrupt the even pattern that existed before and scatter new brush splits
throughout the room. You can observe this by using the <b>DrawFlat </b>and <b>ShowSplits
</b>console commands. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The best way to avoid this
problem is to carefully pre-plan before adding details in areas where their
effects will be drastic. One way to do this is to bind such objects in a <b>WorldModel
</b>in cases where that won’t affect the object’s functioning. Also, in many
cases such as light fixtures and some columns, you can build your fixture and then
move it 1 to 4 units away from the surface it would normally be touching. That
prevents the split, and in many cases the player will never notice the
difference. You must be careful using this technique, however. If you place a
light in the right location, it will give away what you’ve done since the
lifted object won’t cast a proper shadow. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Another issue that
increases your polygon counts in a room is visibility leaks. To explain, the
computer and the player see the level in different ways. The player can’t see
anything that’s behind a solid wall or any solid surface. However, the computer
always looks just a little bit ahead and pre-draws some objects that may not
yet be visible to the player. This is for two reasons:&nbsp; One, the computer
estimates cautiously when it decides what the player will be able to see. Two,
the computer pre-loads some geometry that it thinks the player may <i>soon </i>be
able to see in order to spread out the press of loading the polygons and
textures. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>This usually comes in the
form of a wall or other fixture in the next room that adds to the poly counts
in the current room. Sometimes the increase in counts makes very little sense.
You can have a very small room without any real detail such as an entryway with
the polygon counts of a much larger, more detailed room. If you look around in
a room like this, you can almost always find either a hallway into another more
detailed room or a leak to the outside of the level. </span></p>

<h3><a name="_Toc502717231"><span style='font-family:Arial'>Troubleshooting
Visibility Leaks </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>Two useful console commands
come into play when troubleshooting visibility leaks:&nbsp; <b>LockPVS </b>and <b>Wireframe
</b>. The first command, <b>LockPVS </b>, tells the engine to continue drawing
whatever is currently visible to it (the <b>Potentially Visible Set </b>) and
not to load any further brushes into the world until it’s un-frozen. Use this
when you’re getting high counts in a particular view and want to see what’s
being drawn in another room. Once you get the high counts on your screen, enter
<b>LockPVS 1 </b>on the console. After that, you can walk the area and see what
the engine’s drawing. Only objects that are visible from the point where you
locked the PVS will be drawn. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The <b>Wireframe </b>mode
is harder to work with but more flexible. It switches your view to a wireframe
view of the level. Since all brushes are transparent in wireframe view, you can
see right through a wall into rooms on the other side. This means you can also
see what brushes are being drawn in rooms other than the one you are in. Though
it takes some getting used to, this mode makes it possible to figure out
exactly when and where the view of a room or object is cut off, making it
extremely useful when you want to check your visibility blocks. This command
should be used in conjunction with the <b>ForceClear </b>command if you get bad
redraw effects when WireFrame is turned on. Some games do this automatically.
You may also want to use the <b>DrawFlat </b>command to turn off textures,
which makes it easier to see the wireframe lines. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>You can break visibility
between rooms most certainly using a corridor with a pair of 90-degree turns in
it. A U-turn should totally cut visibility, and an S-turn with the proper
length of corridor in between the two turns will almost always work. Below
that, controlling visibility becomes an art. Often, you will be amazed by what
the engine decides you can see from a given point. It’s important to carefully
walk your level and watch polygon counts for this reason. </span></p>

<p><b><span style='font-size:10.0pt;font-family:Arial'>Note:&nbsp; </span></b><span
style='font-size:10.0pt;font-family:Arial'>If you haven’t done a Full
Optimization compile on your level, you cannot rely on the visibility or poly
count results you obtain. Full Optimization cuts down counts far, far more than
a Fast Approximation does. Similarly, if you don’t compile with optimization
turned on at all, your whole level is visible from all points, leading to
counts that are much higher than they will be after optimization. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>In order to increase your
chances of blocking off line of sight between areas, there are several things
you can do. First, make use of kinks in between areas as described. Second,
make sure that walls extend from the floor of a room to its ceiling. Third,
make sure your walls fit snugly together. Fourth, keep the number of connecting
doors, windows or vents between rooms as low as is reasonable so that you can
more easily troubleshoot. Fifth, treat your outdoor areas in the same fashion,
dipping your sky portal brushes down like a ceiling to close off one region of
the outside from others. Use hills, hedges and tall buildings as walls to reach
up and touch these sky brushes, thus completing the seal. The last tool to help
you close off one area from another is the hullmaker brush. </span></p>

<h3><a name="_Toc502717232"><span style='font-family:Arial'>Working With
Hullmakers </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>Hullmakers are special
brushes whose <b>Hullmaker </b>property is set to True. To make a hullmaker
brush, you switch to Geometry Mode, and then lay the points for the brush you
want to create. The resulting brush has a zero thickness (which is as you want
it). You should place hullmakers in doorways or hallways where you feel
visibility should be blocked off but you can still see polygons in the next
room. Make sure that your hullmaker completely fills the doorway or hole that
you are trying to block, and that the only property set to True on the
hullmaker brush is <b>Hullmaker </b>. The player should never see these brushes
inside a game level. Their sole purpose is to split the <b>hulls </b>of the
level where they’re placed, encouraging the engine to block visibility there. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Hullmakers do not work 100
percent of the time; often, the engine decides that despite the split the
player can still see past and into the room beyond. Sometimes, placing
hullmakers can even split up brushes in ways that drive up polygon counts.
Don’t dump hullmakers into a level expecting miracles. Pick a problem area and
carefully add hullmakers or modify the layout around the area until you see the
results you want </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>The last way to reduce
polygon counts is to make sure that your level is <b>sealed </b>. The best way
to think of your level is as a submarine or spaceship:&nbsp; right outside it
there is a bad, unfriendly place. The interior of the level should always be
isolated from the outside by a solid shell of brushes, none of which are bound
to WorldModels, have their <b>Invisible </b>flag set, or have their <b>Detail
Level </b>set to 1 or higher. In other words, it should be impossible to see or
reach the outer space around your level. This is where careful brush creation
habits and compiling regularly while you build are helpful. It’s much easier to
catch a leak when you first cause it than after you’ve built an entire room. </span></p>

<h3><a name="_Toc502717233"><span style='font-family:Arial'>Plugging Leaks </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>If your level does develop
a leak, you can use a leak file generated by the Processor to help find it. To
create a leak file, enter the command string –leakfile myfile.leak in the <b>Extra
Parameters </b>field of the Processor. Once the Processor makes its leak file,
load it into DEdit using the <b>World </b>menu to select <b>Debug </b>, and
then click <b>Load Leak File </b>. This helpsyou to follow the path that
appears until you find the hole. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Plugging leaks is important
for three reasons. First, leaks can cause parts of the outer shell to be
visible inside the level, unnecessarily increasing your counts. Second, leaks
keep the level’s outer shell from being removed by Processor, increasing the
size of the level’s .DAT file on disk. Last, if Processor has to do visibility
calculations for the outer shell, it will take a great deal longer to complete.
It pays to plug your leaks. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Another concern is a factor
called <b>overdraw </b>, which is the number of polygons drawn on screen that
are actually out of the player’s view behind other polygons. This is related
closely to the visibility optimizations referred to previously. You can often
find high levels of overdraw in rooms with lots of detail:&nbsp; columns, low
walls, complex fixtures and cracks can all lead to overdrawing. Overdraw in a
scene is measured using the <b>ShowFillInfo </b>console command. In the
development of the game <b>Shogo </b>, for instance, values of 2-3 here were
considered acceptable and values of 4-6 were danger signs. Once again, testing
on your target platform to obtain figures for your own game would be wise. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Besides geometry-related
factors that may slow down your game when it’s running, you can also get
significant slowdowns if you use too many textures or several overlarge
textures in a scene. Even in the age of AGP, if you use a 512x512 texture for
everything from tiles on the bathroom floor to murals to the nameplate on a
door, the game will run more slowly. As with many problems, this is best
addressed in the design stages rather than in the testing stage. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>You should try to resist
the urge to use the largest texture possible and instead work to find a balance
between a texture that looks good and is small in size. Objects that won’t get
much scrutiny like floor/ceiling tiles, wall-to-wall carpets and grass should
usually be given small textures. Objects that the player will focus on (view
screens with data, pictures, signs) can use higher-resolution textures. The
console command <b>ShowTextureCounts </b>provides information on textures for
help in troubleshooting. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Entities can also affect
game performance. If you build a huge particle fountain that creates 1000
particles every second with a decay time of 10 seconds on each particle, the
engine is going to be very busy keeping track of the particles. Likewise,
large, moving objects such as props made from WorldModels can slow the engine
down as it tries to manage their physics. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Character models and AI can
also affect frame rate. A level that runs fine with just the player on it can
bog down seriously when two very intelligent AI enemies are added to it.
Likewise, a Boss character with thousands of polies in her character model will
slow the engine much more than a minor character with just a few hundred. Be
careful how you code, design and place your AI. Also, be sure to test the
results to make sure you haven’t stressed the system too much. The <b>ShowTickCounts
</b>command gives useful information for figuring out these sorts of
generalized issues by listing what portion of the engine’s time is spent in
what area, be it rendering, sound or game code. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>As mentioned before,
optimization is more art than science, and it takes practice. The warning signs
of trouble you should always heed are low frame rates, high polygon counts in a
scene, and sudden jumps in the length of time it takes to process your level.
Any of these should make you take notice. Immediately backtrack and figure out
what has caused the issue. Even if you don’t do anything to correct it at the
time, performance issues are almost always easier to fix if they’re identified
early. It is heartbreaking to have to discard a level that is completed but
completely unworkable, and you <i>will </i>do so if you don’t pay careful
attention to optimization throughout the construction process. </span></p>

<h1><a name="_Toc502717234"><span style='font-family:Arial'>Objects </span></a></h1>

<p><span style='font-size:10.0pt'>Below is a list and basic description of game
objects used in the creation of Alien vs Predator 2. If you have a question
about the meaning of any of the available properties of an object, you may
access the online help built into DEdit by placing your cursor over the
property in question until the cursor is replaced by a question mark. Left
click to display a definition of that property. </span></p>

<h3><a name="_Toc502717235"><span style='font-family:Arial'>AmmoBox </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>AmmoBoxes are placed in the
world as a powerup. Each Ammobox can contain up to ten different kinds of
ammunition. </span></p>

<h3><a name="_Toc502717236"></a><a name="_Toc500144977"></a><span
style='mso-bookmark:_Toc502717236'><span style='font-family:Arial'>Camera </span></span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>Cameras show scenes in the
world outside the player. </span></p>

<h3><a name="_Toc502717237"><span style='font-family:Arial'>CinematicTrigger </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is a controller object
used for cutscenes and in game dialog. </span></p>

<h3><a name="_Toc502717238"></a><a name="_Toc500144978"></a><span
style='mso-bookmark:_Toc502717238'><span style='font-family:Arial'>ClientLightFX
</span></span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>ClientLightFX can be used
to create things like flashing lights, lightning, and switchable lights.
Although many objects and weapons generate their own lights, it’s still useful
to be able to individually place lights to create more customized effects. You
can also design a ClientLightFX object so that it creates high-quality
animating lightmaps or casts shadows on moving objects.&nbsp; </span></p>

<h3><a name="_Toc502717239"><span style='font-family:Arial'>Controller </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object controls
properties of up to 8 objects.&nbsp; Just setup its TargetX properties for the
objects and send it one of these messages: </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><span
style='font-size:10.0pt;font-family:Arial'>FADE </span></b><span
style='font-size:10.0pt;font-family:Arial'>&lt;parameter type&gt;
&lt;destination value&gt; &lt;duration&gt; [Wave type (default is SINE)] </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Fades to the specified
destination value over time. </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><span
style='font-size:10.0pt;font-family:Arial'>FLICKER </span></b><span
style='font-size:10.0pt;font-family:Arial'>&lt;interval min&gt; &lt;interval
max&gt; &lt;message to send&gt; [count, default -1 which means forever] </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Sends a trigger message to
the objects in a random time between the specified interval. </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><span
style='font-size:10.0pt;font-family:Arial'>OFF </span></b></p>

<p><span style='font-size:10.0pt;font-family:Arial'>Stops whatever happening. </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-size:10.0pt;font-family:Arial'>Supported parameter types: </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-size:10.0pt;font-family:Arial'>Alpha - value 0-1 </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-size:10.0pt;font-family:Arial'>Color - values 0-255, must be
specified in quotes like &quot;1 2 3&quot;.&nbsp; If you specify an X for the
value, that value won't be changed. </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-size:10.0pt;font-family:Arial'>Wave types supported: </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-size:10.0pt;font-family:Arial'>LINEAR </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-size:10.0pt;font-family:Arial'>SINE </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-size:10.0pt;font-family:Arial'>SLOWOFF (linear until halfway, then
sin for other half) </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-size:10.0pt;font-family:Arial'>SLOWON (sin for halfway, then linear
for other half) </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-size:10.0pt;font-family:Arial'>Sample messages: </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i><span
style='font-size:10.0pt;font-family:Arial'>To send a message between every 5
and 10 seconds forever: </span></i></p>

<p><span style='font-size:10.0pt;font-family:Arial'>FLICKER&nbsp; 5&nbsp;
10&nbsp; &quot;Some message to send&quot; </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i><span
style='font-size:10.0pt;font-family:Arial'>To send a message every 3 seconds,
10 times: </span></i></p>

<p><span style='font-size:10.0pt;font-family:Arial'>FLICKER&nbsp; 3&nbsp;
3&nbsp; &quot;Some message to send&quot;&nbsp; 10 </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i><span
style='font-size:10.0pt;font-family:Arial'>To fade alpha to 0 over 5 seconds
using a sine wave: </span></i></p>

<p><span style='font-size:10.0pt;font-family:Arial'>FADE&nbsp; ALPHA&nbsp;
0&nbsp; 5&nbsp; SINE </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i><span
style='font-size:10.0pt;font-family:Arial'>To fade color to &quot;0 128
256&quot; over 7 seconds using a slow on wave: </span></i></p>

<p><span style='font-size:10.0pt;font-family:Arial'>FADE&nbsp; COLOR&nbsp;
&quot;0 128 256&quot;&nbsp; 7&nbsp; SLOWON </span></p>

<p><span style='font-size:10.0pt;font-family:Symbol'>·</span><span
style='font-size:7.5pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i><span
style='font-size:10.0pt;font-family:Arial'>To fade red and blue to 111 over 9
seconds using a linear wave: </span></i></p>

<p><span style='font-size:10.0pt;font-family:Arial'>FADE&nbsp; COLOR&nbsp;
&quot;111 X 111&quot;&nbsp; 9&nbsp; LINEAR <o:p></o:p></span></p>

<h3><span style='font-family:Arial'>DebrisSpawner</span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is used for
spawning debris.<span style="mso-spacerun: yes">  </span>Turn the debris
spawner on by sending it an “On” message.</span></p>

<h3><a name="_Toc502717240"></a><a name="_Toc500144979"></a><span
style='mso-bookmark:_Toc502717240'><span style='font-family:Arial'>DemoSkyWorldModel
</span></span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>DemoSkyWorldModels allow
objects to render in the skybox in a single step. A DemoSkyWorldModel is an
object that fuses a WorldModel and a SkyPointer. By doing this, binding a brush
to the one object allows it to be rendered in the skybox without the need for
any additional objects. </span></p>

<h3><a name="_Toc502717242"></a><a name="_Toc500144980"></a><span
style='mso-bookmark:_Toc502717242'><span style='font-family:Arial'>DirLight </span></span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>DirLights act like a
spotlight, shining only within an arc that you specify instead of in a sphere
like a regular light. You can aim them to any angle you choose. </span></p>

<h3><a name="_Toc502717244"><span style='font-family:Arial'>DisplayTimer </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object was not used in
the creation of AVP2 and is not supported.</span></p>

<h3><a name="_Toc502717245"></a><a name="_Toc500144981"></a><span
style='mso-bookmark:_Toc502717245'><span style='font-family:Arial'>Door </span></span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>Doors are objects you bind
to a brush to create a moveable worldmodel. <o:p></o:p></span></p>

<h3><a name="_Toc502717246"><span style='font-family:Arial'>Breakable </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is a subclass of the
Door object The Breakable object can be used for both collapsing floors
(default behavior) and falling objects. Since it is a subclass of the Door
object, it shares many of its properties. </span></p>

<h3><a name="_Toc502717247"><span style='font-family:Arial'>HingedDoor </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is a subclass of the
Door object The HingedDoor object is used to emulate the functionality of a
door that swings on hinges. Since it is a subclass of the Door object, it
shares many of its properties. </span></p>

<h3><a name="_Toc502717248"><span style='font-family:Arial'>Switch </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is a subclass of the
Door object The Switch object is used to create an easily identifiable “switch”
object that the player can interact with to control things within the game
environment. Since it is a subclass of the Door object, it shares many of its
properties. <o:p></o:p></span></p>

<h3><span style='font-family:Arial'>Dripper </span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is an object used to
place dripping effects in the world.<span style="mso-spacerun: yes"> 
</span>The dimensions of this object should stretch from the drip origin to the
ground.<o:p></o:p></span></p>

<h3><span style='font-family:Arial'>EvacZone</span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is an object used to
establish the Evac zone in an Evac multiplay level.<span style="mso-spacerun:
yes">  </span>The dimensions of the object determine the size of the zone.</span></p>

<h3><a name="_Toc502717249"><span style='font-family:Arial'>EventCounter </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object will store up
to 5 different &quot;events&quot;, with each event containing an integer value
and two commands.&nbsp; The idea is that the game code can increment/decrement
the EventCounter's value (by sending ”Increment” or “Inc” and ”Decrement” or
“Dec” messages).&nbsp; When the counter’s value is equal to one (or more) of
the EventXValue (i.e., Event1Value, Event2Value, etc.), either the
EventXIncToValCmd or EventXDecToValCmd will be processes.&nbsp; In other words,
how the counter gets to the EventXValue determines which command is sent.&nbsp;
For example, if Event1Value = 2, and the EventCounter’s staring value is 0, if
the EventCounter gets 2 “Inc” messages, the Event1IncToValCmd will be
processed.&nbsp; If at this point the “Inc” message is sent again (so the
counter is now at 3), and then the “Dec” message is sent to the counter, the
Event1DecToValCmd will be processed.&nbsp; This object also understands the
“Lock” and “Unlock” commands (Inc/Dec don’t have any effect on the counter if
it is locked). </span></p>

<h3><a name="_Toc502717250"><span style='font-family:Arial'>Explosion </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is an object used to
place explosion effects in the world. </span></p>

<h3><a name="_Toc502717251"><span style='font-family:Arial'>Mine </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is a subclass
of the Explosion object. It is used to emulate land mines. Since it is a
subclass of the Explosion object, it shares many of its properties. </span></p>

<h3><a name="_Toc502717252"><span style='font-family:Arial'>FastApproxArea </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>A FastApproxArea marks an
area of the level (bounded by hull makers or portals) to use the Fast
Approximation method in the preprocessor.&nbsp; This can be useful to make
preprocessing go faster in outdoor areas where visibility can’t be optimized
very well anyways. This is an object that was not used in the creation of AVP2
and is not supported. </span></p>

<h3><a name="_Toc502717253"><span style='font-family:Arial'>Fire </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is an object used to
create fire effects. <o:p></o:p></span></p>

<h3><span style='font-family:Arial'>FogVolume </span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object was not used in
the creation of AVP2 and is not supported.</span></p>

<h3><a name="_Toc502717254"></a><a name="_Toc500144982"></a><span
style='mso-bookmark:_Toc502717254'><span style='font-family:Arial'>GameStartPoint
</span></span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is the point that the
player enters the game world. <o:p></o:p></span></p>

<h3><span style='font-family:Arial'>MPStartCommand</span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is a property field
found in the GameStartPoint object.<span style="mso-spacerun: yes">  </span></span><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;color:black'>Every
time a </span><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>multi-player <span style='color:black'>level loads, all
commands in this field will be sent from any startpoint in the level.<span
style="mso-spacerun: yes">  </span>For example, if there are 20 startpoints in
the level and 12 of them have a message in this field, all 12 messages will be
sent at level load every time.<span style="mso-spacerun: yes">  </span>The code
makes no distinction between one startpoint and another.<span
style="mso-spacerun: yes">  </span>If you have just one message that needs to
be sent, put it in any startpoint in the level and leave all the rest of the
startpoints alone.</span><o:p></o:p></span></p>

<h3><span style='font-family:Arial'>GenericObject</span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object was not used in
the creation of AVP2 and is not supported.</span></p>

<h3><a name="_Toc502717256"><span style='font-family:Arial'>Group </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is an object used when
you wish to send the same message to several different objects at once. It acts
as a simple relay. </span></p>

<h3><a name="_Toc502717257"><span style='font-family:Arial'>InsideDef </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is used to
define an area as the inside portion of a shell. The GameStartPoint normally
does this. But, sometimes you will want to build other separate areas that are
cut off from the main map, but that are still a part of the level. To keep
these from being removed when the level is processed, you will need to add an
InsideDef object to define the area as part of the inside shell. </span></p>

<h3><a name="_Toc502717258"><span style='font-family:Arial'>Key </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is an object used to
define a point in the path of a keyframed object. </span></p>

<h3><a name="_Toc502717259"><span style='font-family:Arial'>KeyFramer </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is an object used to
define a point in the path of a keyframed object. </span></p>

<h3><a name="_Toc502717260"><span style='font-family:Arial'>KeyFramerLight </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is a special light
object used for animated lighting. </span></p>

<h3><a name="_Toc502717261"><span style='font-family:Arial'>Light </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is a basic point
light, or omni light object used to light the world.<o:p></o:p></span></p>

<h3><span style='font-family:Arial'>LightGroup </span></h3>

<p><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>This
is object is used to turn lights on and off in a level.<span
style="mso-spacerun: yes">  </span>To use this object, drag a Light or Dirlight
beneath a LightGroup object (Lights/Dirlights are children to the LightGroup
parent).<span style="mso-spacerun: yes">  </span>To turn the lights on or off,
send the Lightgroup object an “On” or “Off” message.<o:p></o:p></span></p>

<h3><a name="_Toc502717262"><span style='font-family:Arial'>Lightning </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is used to
create lightning and electrical effects in the game. </span></p>

<h3><a name="_Toc502717264"><span style='font-family:Arial'>ObjectLight </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is a light that only
affects models. </span></p>

<h3><a name="_Toc502717265"><span style='font-family:Arial'>ObjectRemover </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>ObjectRemover contains
several &quot;groups&quot; of objects. For each group, you may list up to 6
objects. Specify how many groups of objects you wish to keep in the
&quot;GroupsToKeep&quot; property. </span></p>

<p><span style='font-size:10.0pt;font-family:Arial'>On the first update, the
ObjectRemover will randomly select the groups of objects it will keep (based on
how many were specified to keep), and remove all the objects in all the other
groups, and then remove itself. </span></p>

<h3><a name="_Toc502717266"><span style='font-family:Arial'>OutsideDef </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is placed to
define the outside leaf of the world. </span></p>

<h3><a name="_Toc502717267"></a><a name="_Toc500144987"></a><span
style='mso-bookmark:_Toc502717267'><span style='font-family:Arial'>ParticleSystem
</span></span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>Any time you want to spawn
a large number of similar simple objects in one location or area, you probably
want a ParticleSystem object. Particle systems create a cloud of objects,
usually sprites or simple models. They can make the sprites move, determine the
area where they appear and how long they remain after being created. </span></p>

<h3><a name="_Toc502717268"></a><a name="_Toc500144990"></a><span
style='mso-bookmark:_Toc502717268'><span style='font-family:Arial'>PolyGrid </span></span></h3>

<p><a name="_Toc502717269"><span style='font-size:10.0pt;font-family:Arial'>A
polygrid is a grid of triangles that can have an animating surface. They’re
used to simulate flags, curtains, water, force fields and many other effects. </span></a><span
style='font-size:10.0pt;font-family:Arial'><o:p></o:p></span></p>

<h3><span style='font-family:Arial'>PickupObject</span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is used to
place powerups throughout a level (ammo, armor, health, etc…).</span></p>

<h3><a name="_Toc502717270"><span style='font-family:Arial'>Prop </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>The Prop object is used to
place .abc models into the game world. Props are typically things that would be
too complex or impractical to be created from world geometry. Examples would be
plants, telephones, detailed furnishings, etc. <o:p></o:p></span></p>

<h3><span style='font-family:Arial'>AmmoBox</span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is a subclass
of the Prop object.<span style="mso-spacerun: yes">  </span>This object is used
to place ammobox powerups that hold multiple pickups.<span style="mso-spacerun:
yes">  </span><o:p></o:p></span></p>

<h3><a name="_Toc502717274"><span style='font-family:Arial'>TorchableLock </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is a subclass
of the Prop object. This object is used to place Locks in the world that the
player can circumvent using the torch. Since it is a subclass of the Prop
object, it shares many of its properties. </span></p>

<h3><a name="_Toc502717276"><span style='font-family:Arial'>PropType </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is a subclass
of the Prop object. This is a different way of managing prop placement in
levels. We found that a lot of the props that we placed were set up the same as
each other. Yet we still had to set all of the flags. The PropType object places
props by way of a simple dropdown menu. The dropdown menu refers to a bute file
where the all of the prop flags have been predefined. Since it is a subclass of
the Prop object, it shares many of its properties. </span></p>

<h3><a name="_Toc502717280"><span style='font-family:Arial'>RandomSpawner </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>The RandomSpawner is used
to spawn objects randomly through multiple Spawner objects. </span><span
style='font-family:Arial'><o:p></o:p></span></p>

<h3><a name="_Toc502717281"><span style='font-family:Arial'>RaySelecter </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object was not used in
AVP2 and is not supported. </span></p>

<h3><a name="_Toc502717282"><span style='font-family:Arial'>RotatingWorldModel </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>These are objects that spin
on any given axis. The most common example of a RotatingWorldModel would be a
spinning fan. </span></p>

<h3><a name="_Toc502717283"></a><a name="_Toc500144993"></a><span
style='mso-bookmark:_Toc502717283'><span style='font-family:Arial'>ScaleSprite </span></span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>ScaleSprites are
free-standing textures that don’t need a surface to appear on. ScaleSprites get
compounded into a lot of other game objects, but they can be used on their own
to make a lot of things happen too. ScaleSprites are used for all kinds of
things<b> — </b>halos around lights, floating symbols, decals on walls and
objects in the sky </span></p>

<h3><a name="_Toc502717284"><span style='font-family:Arial'>ScreenShake </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>The ScreenShake object
shakes the camera when triggered. </span></p>

<h3><a name="_Toc502717285"></a><a name="_Toc500144992"></a><span
style='mso-bookmark:_Toc502717285'><span style='font-family:Arial'>SkyPointer </span></span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>SkyPointer objects allow
the objects that they target to render in the skybox of the level. Only
WorldModel-derived objects and Sprites can appear in the skybox. </span></p>

<h3><a name="_Toc502717286"><span style='font-family:Arial'>SoundFX </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object allows you to
place sounds in the world. <o:p></o:p></span></p>

<h3><span style='font-family:Arial'>SoundFXObj </span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object was not used in
AVP2.<span style="mso-spacerun: yes">  </span>Use the SoundFx object for all
sounds.</span></p>

<h3><a name="_Toc502717287"><span style='font-family:Arial'>Spawner </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This is a generic object
used to “Spawn” objects into the game world. <o:p></o:p></span></p>

<h3><span style='font-family:Arial'>MultiSpawner</span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is a subclass
of the Spawner object.<span style="mso-spacerun: yes">  </span>The object is
used for controlling multiple spawns from the same object.</span></p>

<h3><span style='font-family:Arial'>SpectatorPoint</span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is used for
player view cameras in Evac and OverRun team maps.<o:p></o:p></span></p>

<h3><span style='font-family:Arial'>Sprinkles </span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object was not used in
AVP2 and is not supported.<o:p></o:p></span></p>

<h3><span style='font-family:Arial'>SpriteControlObject</span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object was not used in
the creation of AVP2 and is not supported.<o:p></o:p></span></p>

<h3><span style='font-family:Arial'>StarLightView</span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is used with
levels supporting vision modes.<span style="mso-spacerun: yes">  </span>You’ll
need one StarLightView for each vision mode for Predators, Marines, and
Aliens.<span style="mso-spacerun: yes">  </span>The standard vision modes used
for the retail version of AVP2 can be found in the StarLightTest.ed file found
in the Worlds directory.<o:p></o:p></span></p>

<h3><a name="_Toc502717290"></a><a name="_Toc500144994"></a><span
style='mso-bookmark:_Toc502717290'><span style='font-family:Arial'>StaticSunLight
</span></span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>The StaticSunLight object
supplies levels that have a skybox with light from a sunlike source. The light
radiates into the level through all skyportal brushes as if from an infinitely
far point. This sunlight’s direction is determined by the rotation of the
StaticSunLight object. Its position doesn’t matter, since the emitted light
acts as if it comes from an infinite distance. The StaticSunlight’s position is
ignored. </span></p>

<h3><a name="_Toc502717291"><span style='font-family:Arial'>Steam </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>The Steam object is a form
of the ParticleSystem object that has been set up to more easily create
particle effects resembling jets of steam. The effect created by this object
travels down the forward facing vector of the object. </span></p>

<h3><a name="_Toc502717292"><span style='font-family:Arial'>TeleportPoint </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is used to
define the position and rotation of a point in space that the player or an AI
can be moved to instantly. </span></p>

<h3><a name="_Toc502717293"></a><a name="_Toc500144995"></a><span
style='mso-bookmark:_Toc502717293'><span style='font-family:Arial'>Terrain </span></span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>Terrains are a special case
object similar to a WorldModel that are able to contain a group of brushes.
Although they get the full benefits of game physics, they never block
visibility or cast shadows and they cannot move or be transparent, but they
have the special property that they can contain one-sided brushes. This allows
them to take meshes from external 3D packages and use them as valid world
objects. You can model very irregular objects in an outside package and still
have it operate in the world like world geometry instead of model geometry
using a terrain object. It is important for performance reasons to only use a
single terrain object to hold all terrain geometry in your level. It won’t
affect their physics even if pieces are in totally separate parts of the level.
<o:p></o:p></span></p>

<h3><span style='font-family:Arial'>TorchableLockCounter</span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is used when
multiple torchable locks must be torched before an event can occur.</span></p>

<h3><a name="_Toc502717294"><span style='font-family:Arial'>TranslucentWorldModel
</span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>By binding world geometry
to a TranslucentWorldModels it becomes a world model and inherits properties
unavailable to normal world geometry. The three main reasons for binding
geometry to a TranslucentWorldModel are translucency and chromakeying, to be
able to keyframe an object, and to simplify the physics of particularly complex
geometry for performance reasons. </span></p>

<h3><a name="_Toc502717295"></a><a name="_Toc500144996"></a><span
style='mso-bookmark:_Toc502717295'><span style='font-family:Arial'>Trigger </span></span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>Triggers can be used like
tripwires. When the player or an A.I. character passes through one, it sends a
message to any other objects you want, telling them to do whatever they do. If
a keyframer is the target, the keyframer will start moving the objects attached
to it. If the target is a door, the door will open or close. Triggers can
trigger any object, even other triggers. </span></p>

<h3><a name="_Toc502717296"><span style='font-family:Arial'>ExitTrigger </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is a subclass
of the Trigger object. This object is used to trigger the end of a level. Since
it is a subclass of the Prop object, it shares many of its properties. </span></p>

<h3><a name="_Toc502717297"><span style='font-family:Arial'>LaserTrigger </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is a subclass
of the Trigger object. This object is used to create laser trip wires that are
invisible without the use of the infrared sunglasses gadget in AVP2. Since it
is a subclass of the Prop object, it shares many of its properties. </span></p>

<h3><a name="_Toc502717298"></a><a name="_Toc500144998"></a><span
style='mso-bookmark:_Toc502717298'><span style='font-family:Arial'>VolumeBrush </span></span></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>Volume brushes are used for
a number of effects <b>— </b>Water, damaging environments, rainy areas, and AI
movement. A VolumeBrush object is designed to bind to a brush and use the brush
to determine its area of effect. If the effect is continuous, such as rain or
snow, it only occurs within the space defined by the brush. If the effect
happens to players and Ais, it only happens to them when they’re within the
volume. The effects of the volume are triggered when the player enters the
space and usually un-triggered when they leave. </span></p>

<h3><a name="_Toc502717300"><span style='font-family:Arial'>WorldProperties </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object is placed in
every level to define many of the global properties of the level. </span></p>

<h3><a name="_Toc502717301"><span style='font-family:Arial'>WorldSection </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object was not used in
the creation of AVP2 and is not supported. </span></p>

<h3><a name="_Toc502717302"><span style='font-family:Arial'>Zone </span></a></h3>

<p><span style='font-size:10.0pt;font-family:Arial'>This object was not used in
the creation of AVP2 and is not supported. </span></p>

</div>

</body>

</html>
